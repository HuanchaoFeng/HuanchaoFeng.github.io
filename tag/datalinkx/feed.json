{
    "version": "https://jsonfeed.org/version/1",
    "title": "Phoenix • All posts by \"datalinkx\" tag",
    "description": "Every day is a chance to learn something new",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/05/13/DatalinkX/",
            "url": "http://example.com/2025/05/13/DatalinkX/",
            "title": "DatalinkX",
            "date_published": "2025-05-12T16:35:28.000Z",
            "content_html": "<p>DatalinkX是一个基于Flink的异构数据源流转服务，用来作为数据源之间的数据同步工具，通过抽象异构数据源驱动加借助FlinkX开源组件屏蔽数据源间不同的通信协议，通过页面化配置数据同步任务的方式简化数据库同步流程，并通过Xxl-Job组件实现定时调度。</p>\n<h2 id=\"模块设置\"><a href=\"#模块设置\" class=\"headerlink\" title=\"模块设置\"></a>模块设置</h2><ul>\n<li>业务数据管理模块:负责管理数据源和同步任务的增删改查。包含数据源管理、任务管理等。</li>\n<li>同步任务管理模块:借助xx1-job实现任务调度管理，确保异构数据源的定时同步和实时更新需求，同时支持批量任务管理，提高任务调度的效率。</li>\n<li>RPC通信模块:利用Retrofit2实现分布式服务间的RPC调用，提供高效的数据请求和响应机制支持各模块间的数据传输和服务调用。</li>\n<li>数据源驱动模块:负责异构数据源的驱动配置，兼容多类型数据源的连接、读取和写入操作，为业务数据管理和同步提供支持。</li>\n<li>消息通道模块:采用Redis Stream实现分布式消息队列，保障各模块间的消息通信效率和数据传5.<br>输的可靠性。</li>\n<li>实时刷新前端模块:通过SSE技术实现数据的实时推送，配合Ant Design在前端即时刷新数据提供用户友好的动态体验。</li>\n<li>公共模块:包含系统基础功能、工具方法和通用接口，实现各模块间的共享，提升系统的可维护性和复用性。</li>\n<li>FlinkX模块:负责人规模数据的实时同步、数据清洗和格式转换，支持流式和批量数据的整合处理，为系统提供数据支持。<br>数据清洗与转换模块:基于Flinkx的清洗能力，对不同数据源的数据进行标准化、过滤和转换以确保进入系统的数据一致性。</li>\n</ul>\n<h2 id=\"重要模块\"><a href=\"#重要模块\" class=\"headerlink\" title=\"重要模块\"></a>重要模块</h2><ul>\n<li><h3 id=\"消息队列-SSE实现实时推送\"><a href=\"#消息队列-SSE实现实时推送\" class=\"headerlink\" title=\"消息队列+SSE实现实时推送\"></a>消息队列+SSE实现实时推送</h3><ol>\n<li>首先基于自定义注解@messageHub标注消费者方法，在程序运行初始化完Bean之后，实现对每个Bean进行循环检查，寻找带该注解的方法，找到后将其注册成消费者。</li>\n<li>基于Redis的stream数据结构实现轻量级的消息队列，出于两点原因选择该方式，首先是本项目只需要使用消息队列实现任务状态和任务进度的推送，不需要严格意义上的高可用、低延迟，其次是RabbitMQ或者是Kafka服务的复杂性，一个健壮的项目并不是引入越多的中间件会越好，而是Bug越少越好，或者说出Bug概率越低越好。而Redis的stream借助了很多Kafka的设计思路，而且更轻量级。</li>\n<li>消费者的注册，其实是非常简单的一件事，只需要带有@messageHub的，就创建一个线程监听注解中配置的消息地址，监听到消息后回调给该消费者，并返回ACK标记消息已被消费，如果在消费过程中出现故障，则会继续在pending队列中消费，一般会重试4次，如果消费不了，只能是放弃，因为这并不是一个十分重要的操作，丢失部分进度消息是用户能够接收的。</li>\n<li>基于SSE实例实现消息实时推送，SSE是使用流信息向浏览器进行信息推送，也就是信息不是一次性的，而是连续不断的，类似于视频的播放。SSE是一个单向通信，只能服务器向浏览器发送，这里不选择websocket的原因和2一样，基于业务层面去考虑。</li>\n</ol>\n</li>\n<li><h3 id=\"抽象数据源Driver设计\"><a href=\"#抽象数据源Driver设计\" class=\"headerlink\" title=\"抽象数据源Driver设计\"></a>抽象数据源Driver设计</h3><p>​       该项目是支持异构数据源同步的，所以会有很多种数据源，进行每种数据源连接是确实可以使用if else去定义，但是这并不好维护，而且可拓展性十分差，想象一下每次新增一个数据源就写多一个if else，代码的可读性也会很差，所以这里会基于模板模式和工厂模式对数据源驱动的获取进行抽象。</p>\n<p>​    我们把数据源实例抽象为几个步骤，读写分离，然后分别定义为接口，将支持JDBC的数据源做一种实现，不支持JDBC的数据源也做一种实现。每种实现又有一个基础类去实现基础功能。</p>\n<p>如下图所示：</p>\n<p><img src=\"/image1.png\" alt=\"image1\"></p>\n<ol>\n<li><p>DsDriverFactory遵循工厂设计原则，每个数据源必要信息通过压缩算法返回一个唯一字符串connectld，DsDriverFactory向外暴露getDsReader、getDsWriter方法，通过解析connectld得到数据源type，根据数据源type获取对应Driver.class并通过反射生成对应的驱动对象。</p>\n</li>\n<li><p>要新增数据源，比如新增一个Mysql的数据源，那么只需要继承JDBC这个类，JDBC这个类已经实现了部分基本的功能，并制定了相应的执行流程，Mysql继承之后，只需要把获取数据源JdbcUrl这种每个数据源都不同的抽象方法给实现了就行。</p>\n</li>\n<li><p>总体流程就是，用户提交了注册新数据源的信息之后，注册信息会存入数据库中，等到创建流转任务时，会获取数据源下的数据表，这时就调用DsDriverFactory获取数据源实例，并调用实例中的方法获取对应的数据&#x2F;写入数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PACKAGE_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;com.datalinkx.driver.dsdriver.&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getDriverClass</span><span class=\"params\">(String driverName)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> PACKAGE_PREFIX + driverName.toLowerCase() + <span class=\"string\">&quot;driver&quot;</span> + <span class=\"string\">&quot;.&quot;</span> + ConnectIdUtils.toPascalCase(driverName) + <span class=\"string\">&quot;Driver&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//getDriver 方法依赖于 ConnectIdUtils 和 getDriverClass 方法来确定应该加载和实例化哪个驱动类。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDsDriver <span class=\"title function_\">getDriver</span><span class=\"params\">(String connectId)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">dsType</span> <span class=\"operator\">=</span> ConnectIdUtils.getDsType(connectId);</span><br><span class=\"line\">        <span class=\"comment\">//拼接地址，也就是包的地址，来获取对应的类名，并返回给DsServiceImpl类，让他知道用的是哪个实现类，这就是用来替代无数个if else的关键地方</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">driverClassName</span> <span class=\"operator\">=</span> getDriverClass(dsType);</span><br><span class=\"line\">        Class&lt;?&gt; driverClass = Class.forName(driverClassName);</span><br><span class=\"line\">        Constructor&lt;?&gt; constructor = driverClass.getDeclaredConstructor(String.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (IDsDriver) constructor.newInstance(connectId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IStreamDriver <span class=\"title function_\">getStreamDriver</span><span class=\"params\">(String connectId)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">dsType</span> <span class=\"operator\">=</span> ConnectIdUtils.getDsType(connectId);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">driverClassName</span> <span class=\"operator\">=</span> getDriverClass(dsType);</span><br><span class=\"line\">        Class&lt;?&gt; driverClass = Class.forName(driverClassName);</span><br><span class=\"line\">        Constructor&lt;?&gt; constructor = driverClass.getDeclaredConstructor(String.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (IStreamDriver) constructor.newInstance(connectId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDsReader <span class=\"title function_\">getDsReader</span><span class=\"params\">(String connectId)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * getDriver(connectId) 返回的是一个 IDsDriver 类型的对象，然后将其强制转换为 IDsReader 类型。这种转换能够成功执行的前提是：</span></span><br><span class=\"line\"><span class=\"comment\">         * IDsReader 接口继承自 IDsDriver 接口：如果 IDsReader 接口是 IDsDriver 接口的子接口，那么所有的 IDsReader 实现也必然是 IDsDriver 的实现。</span></span><br><span class=\"line\"><span class=\"comment\">         * 这种情况下，转换是合法的，因为 IDsReader 是 IDsDriver 的子类型。</span></span><br><span class=\"line\"><span class=\"comment\">         * 实现类的兼容性：调用 getDriver(connectId) 方法返回的具体实现类必须同时实现了 IDsDriver 和 IDsReader 接口。这是类型转换能够成功的关键。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (IDsReader) getDriver(connectId);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InstantiationException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">&quot;driver load error&quot;</span>, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;driver load error&quot;</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Exception</span>(<span class=\"string\">&quot;can not initialize driver&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDsWriter <span class=\"title function_\">getDsWriter</span><span class=\"params\">(String connectId)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (IDsWriter) getDriver(connectId);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InstantiationException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">&quot;driver load error&quot;</span>, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;driver load error&quot;</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Exception</span>(<span class=\"string\">&quot;can not initialize driver&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><h3 id=\"XXL-Job平台\"><a href=\"#XXL-Job平台\" class=\"headerlink\" title=\"XXL-Job平台\"></a>XXL-Job平台</h3><p>​    xxl-job是一个分布式任务调度平台，核心思想是将调度任务抽象成为调度器和执行器，平台本身不承担业务逻辑，只负责发起调度请求后，由执行器接收调度请求并执行任务，这里的任务被抽象为分散的JobHandler。JobHandler分散到各个业务代码中，依netty保持与调度器的交互，通过这种方式即可实现调度与任务相互解耦，从而提高系统整体的稳定性和拓展性。如下图：</p>\n<p><img src=\"/image2.png\" alt=\"image2\"></p>\n<ol>\n<li><p>调度器只需要借助maven打包xxl-job的admin即可，然后java -jar把jar包运行起来即可，或者是用docker直接部署，而执行器则放在项目中的Job模块下，使用@XxlJob(“XXX”)在方法上定义执行器即可</p>\n</li>\n<li><p>为了解决xxl-job登录的问题，这里会使用一个拦截器，拦截器逻辑非常朴实无华，在发请求之前，判断cookieValue是否存在，如果不存在就通过datalinkx-client的能力发起一次登录请求。登陆后保存cookie加到原请求中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Response <span class=\"title function_\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Request</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> chain.request();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tResponse response;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (StringUtils.isEmpty(cookieValue)) &#123;</span><br><span class=\"line\">\t\t\t\tretrofit2.<span class=\"type\">Response</span> <span class=\"variable\">loginResp</span> <span class=\"operator\">=</span> xxlLoginClient.login(username, passwd, <span class=\"string\">&quot;on&quot;</span>).execute();</span><br><span class=\"line\">\t\t\t\tcookieValue = loginResp.headers().get(SET_COOKIE_HEADER);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (StringUtils.isNotEmpty(cookieValue)) &#123;<span class=\"comment\">//检查是否成功获取了 Cookie 值</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果获取了 Cookie，则创建一个新的请求，将 Cookie 添加到请求头中</span></span><br><span class=\"line\">\t\t\t\t<span class=\"type\">Request</span> <span class=\"variable\">newRequest</span> <span class=\"operator\">=</span> chain.request().newBuilder()</span><br><span class=\"line\">\t\t\t\t\t\t.addHeader(HEADER_COOKIE, cookieValue)</span><br><span class=\"line\">\t\t\t\t\t\t.build();</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//使用新的请求继续执行链式调用，获取响应</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//当前拦截器已经完成了对请求的处理，将请求传递给拦截器链中的下一个拦截器继续处理</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 最后一个拦截器处理请求后，不再调用 proceed，而是直接将请求发送到服务器。服务器的响应返回，按相反顺序通过拦截器链。</span></span><br><span class=\"line\">\t\t\t\tresponse = chain.proceed(newRequest);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tlog.error(<span class=\"string\">&quot;xxl-job login error&quot;</span>);</span><br><span class=\"line\">\t\t\t\tresponse = chain.proceed(chain.request());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (response.code() == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">ResponseBody</span> <span class=\"variable\">responseBody</span> <span class=\"operator\">=</span> response.body();</span><br><span class=\"line\">\t\t\t<span class=\"type\">MediaType</span> <span class=\"variable\">contentType</span> <span class=\"operator\">=</span> responseBody != <span class=\"literal\">null</span> ? responseBody.contentType() : <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (contentType != <span class=\"literal\">null</span> &amp;&amp; contentType.subtype().equals(<span class=\"string\">&quot;json&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">bodyString</span> <span class=\"operator\">=</span> getBody(response);</span><br><span class=\"line\">\t\t\t\tbodyString = bodyString.replaceFirst(<span class=\"string\">&quot;\\&quot;result\\&quot;:\\\\s*\\&quot;\\\\s*\\&quot;&quot;</span>, <span class=\"string\">&quot;\\&quot;result\\&quot;: null&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">ResponseBody</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> ResponseBody.create(contentType, bodyString);</span><br><span class=\"line\">\t\t\t\tresponse = response.newBuilder().body(body).build();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> response;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>流转任务的生命钩子函数设计</p>\n<p>​    通常的模板方法模式中会设计一个abstract的抽象方法，交给它的子类实现，这个方法称为模板方法。而钩子方法，是对于抽象方法或者接口中定义的方法的一个空实现，也是模板方法模式的一种实现方式。设计钩子方法的主要目的是干预执行流程，使得控制行为流程更加灵活，更符合实际业务的需求。在该项目流转任务的生命周期都是基于钩子方法+模板实现的，任务由xxl-job调度中心通过netty回调到DataTransHandler执行器中，执行器中注入任务触发类DataTransferAction，由doAction开始一次任务的执行，而FlinkAction是继承的AbstractDataTransferAction实现各种模板和钩子方法:</p>\n<p>​    六个钩子方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">begin</span><span class=\"params\">(D info)</span>;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">end</span><span class=\"params\">(D info, <span class=\"type\">int</span> status, String errmsg)</span>;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeExec</span><span class=\"params\">(U unit)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(U unit)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"type\">boolean</span> <span class=\"title function_\">checkResult</span><span class=\"params\">(U unit)</span>;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterExec</span><span class=\"params\">(U unit, <span class=\"type\">boolean</span> success, String errorMsg)</span>;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> U <span class=\"title function_\">convertExecUnit</span><span class=\"params\">(D info)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>​    doAction串联生命周期：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doAction</span><span class=\"params\">(T actionInfo)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取job详情</span></span><br><span class=\"line\">    <span class=\"type\">D</span> <span class=\"variable\">detail</span> <span class=\"operator\">=</span> getJobDetail(actionInfo);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">StringBuffer</span> <span class=\"variable\">error</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 准备执行job</span></span><br><span class=\"line\">        begin(detail);</span><br><span class=\"line\">        <span class=\"comment\">// ....</span></span><br><span class=\"line\">        <span class=\"comment\">// 遍历执行启动flink任务</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 每个单元执行前的准备</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isStop()) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">&quot;logkill trigger&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            beforeExec(unit)</span><br><span class=\"line\">            <span class=\"comment\">// 启动任务</span></span><br><span class=\"line\">            execute(unit);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;user stop&quot;</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;execute flink task error.&quot;</span>, e);</span><br><span class=\"line\">            unitCount.decrementAndGet();</span><br><span class=\"line\">            afterExec(unit, <span class=\"literal\">false</span>, e.getMessage());</span><br><span class=\"line\">            error.append(e.getMessage()).append(<span class=\"string\">&quot;\\r\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 整个Job结束后的处理</span></span><br><span class=\"line\">        end(detail, error.length() == <span class=\"number\">0</span> ? JOB_STATUS_SUCCESS : JOB_STATUS_ERROR, error.length() == <span class=\"number\">0</span> ? <span class=\"string\">&quot;success&quot;</span> : error.toString());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        log.error(<span class=\"string\">&quot;Stop task by user.&quot;</span>);</span><br><span class=\"line\">        JobUtils.cntx().setCanceled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        end(detail, JOB_STATUS_STOP, <span class=\"string\">&quot;cancel the job&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">        log.error(<span class=\"string\">&quot;sync failed&quot;</span>, e);</span><br><span class=\"line\">        end(detail, JOB_STATUS_ERROR, e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    这个方法可谓是整个datalinkx的灵魂，核心中的核心，最核心的代码，我们通过这个方法将一个流转任务的生命周期串联起来。<br>这样真正的实现类DataTransferAction.java只需要继承AbstractDataTransferAction实现各个具体的生命周期方法即可，Xx1-Job回调来的方法直接调用FlinkAction继承的doAction方法即可将任务串联执行。</p>\n</li>\n</ul>\n",
            "tags": [
                "datalinkx"
            ]
        }
    ]
}
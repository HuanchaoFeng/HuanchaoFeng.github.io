{
    "version": "https://jsonfeed.org/version/1",
    "title": "Phoenix",
    "description": "Every day is a chance to learn something new",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/05/13/Transformer/",
            "url": "http://example.com/2025/05/13/Transformer/",
            "title": "Transformer",
            "date_published": "2025-05-13T07:07:29.000Z",
            "content_html": "<h2 id=\"transformer四层结构\"><a class=\"markdownIt-Anchor\" href=\"#transformer四层结构\">#</a> Transformer 四层结构</h2>\n<p>Transformer 结构：</p>\n<p><img src=\"image1.png\" alt=\"image1\"></p>\n<ol>\n<li>\n<p>嵌入表示层</p>\n<p>Transformer 的自注意力机制是并行处理所有书如此，无法区分语序，所以需要进行位置编码，做法：先为每个单词生成向量嵌入表示，对每个单词所在位置对应一个位置向量，将两个向量进行相加。位置向量的生成公式如下：</p>\n<p><img src=\"image2.png\" alt=\"image1\"></p>\n<p>根据位置的就选择正弦余弦函数进行计算，这个计算是对每个单词里面的向量的每一维都进行计算，代码如下所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#transformer位置编码</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PositionalEncoder</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, d_model,max_seq_len = <span class=\"number\">80</span></span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.d_model = d_model</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\"># 根据pos和i创建一个常量PE矩阵</span></span><br><span class=\"line\">        pe = torch.zeros(max_seq_len, d_model)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> pos <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(max_seq_len):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, d_model, <span class=\"number\">2</span>):</span><br><span class=\"line\">                pe[pos, i] = math.sin(pos / (<span class=\"number\">10000</span> ** (i/d_model)))</span><br><span class=\"line\">                pe[pos, i + <span class=\"number\">1</span>] = math.cos(pos / (<span class=\"number\">10000</span> ** (i/d_model)))</span><br><span class=\"line\">        pe = pe.unsqueeze(<span class=\"number\">0</span>) <span class=\"comment\">#形状 (1, seq_len, d_model)</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.register_buffer(<span class=\"string\">&#x27;pe&#x27;</span>, pe)   <span class=\"comment\">#将 pe 保存为模型的一部分（不参与梯度更新，但会随模型保存/加载）</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self,x</span>):</span><br><span class=\"line\">        <span class=\"comment\">#x:(batch_size, seq_len, d_model)</span></span><br><span class=\"line\">        seq_len = x.size(<span class=\"number\">1</span>)</span><br><span class=\"line\">        x = x + <span class=\"variable language_\">self</span>.pe[:,:seq_len].cuda()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br></pre></td></tr></table></figure>\n<p>使用正余弦的原因是，函数的范围是 [-1，1] 与词向量相加不会太偏离原始语义，同时第 pos+k 个位置的编码是第 pos 个位置编码的线性组合（根据三角函数和角公式决定），这就蕴含了单词之间的距离信息：</p>\n<p><img src=\"image3.png\" alt=\"image2\"></p>\n</li>\n<li>\n<p>自注意力层</p>\n<p>自注意力机制，即自己作为 QKV 进行计算，但是解码器有两个注意力模块，一个是掩码多头，一个是交叉多头注意力，但是原理其实和下面代码差不多，直接用代码展示比较能说明：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#transformer多头自注意力机制</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MultiHeadAttention</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, heads, d_model,dropout = <span class=\"number\">0.1</span></span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.d_model = d_model</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.h = heads</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.d_k = d_model // heads</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.q_linear = nn.Linear(d_model,d_model)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.k_linear = nn.Linear(d_model,d_model)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.v_linear = nn.Linear(d_model,d_model)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.dropout = nn.Dropout(dropout)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.out = nn.Linear(d_model,d_model)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">attention</span>(<span class=\"params\">q, k, v, d_k, mask = <span class=\"literal\">None</span>, dropout = <span class=\"literal\">None</span> </span>):</span><br><span class=\"line\">        <span class=\"comment\"># 转置k相乘 ​​除以 math.sqrt(d_k)​​ 的操作是缩放点积注意力，防止点积数值过大​</span></span><br><span class=\"line\">        scores = torch.matmul(q,k.transpose(-<span class=\"number\">2</span>,-<span class=\"number\">1</span>)) / math.sqrt(d_k)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mask <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            mask = mask.unsqueeze(<span class=\"number\">1</span>)</span><br><span class=\"line\">            scores = scores.masked_fill(mask == <span class=\"number\">0</span>, -<span class=\"number\">1e9</span>) <span class=\"comment\">#掩盖那些为了补全长度而增加的单元，使其通过Softmax计算后为0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        scores = F.sofmax(scores,dim=-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> dropout <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            scores = dropout(scores)</span><br><span class=\"line\"></span><br><span class=\"line\">        output = torch.matmul(scores,v)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> output</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, q, k, v, mask = <span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        batch_size = q.size(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 利用线性计算划分成h个头</span></span><br><span class=\"line\">        q = <span class=\"variable language_\">self</span>.q_linear(q).view(batch_size,-<span class=\"number\">1</span>,<span class=\"variable language_\">self</span>.h,<span class=\"variable language_\">self</span>.d_k)</span><br><span class=\"line\">        k = <span class=\"variable language_\">self</span>.k_linear(k).view(batch_size,-<span class=\"number\">1</span>,<span class=\"variable language_\">self</span>.h,<span class=\"variable language_\">self</span>.d_k)</span><br><span class=\"line\">        v = <span class=\"variable language_\">self</span>.v_linear(v).view(batch_size,-<span class=\"number\">1</span>,<span class=\"variable language_\">self</span>.h,<span class=\"variable language_\">self</span>.d_k)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#转置头和seq_len位置</span></span><br><span class=\"line\">        k = k.transpose(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">        q = q.transpose(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">        v = v.transpose(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        scores = <span class=\"variable language_\">self</span>.attention(q, k, v, <span class=\"variable language_\">self</span>.d_k, mask, <span class=\"variable language_\">self</span>.dropout)</span><br><span class=\"line\">        <span class=\"comment\"># 拼接多头输出并线性变换</span></span><br><span class=\"line\">        concat = scores.transpose(<span class=\"number\">1</span>, <span class=\"number\">2</span>).contiguous().view(batch_size, -<span class=\"number\">1</span>, <span class=\"variable language_\">self</span>.d_model)</span><br><span class=\"line\">        output = <span class=\"variable language_\">self</span>.out(concat) </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> output</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>前馈层</p>\n<p>接收注意力层的输出，通过带有 ReLU 的 2 层全连接网络，第一层会映射到高纬度，因为隐藏层维度的增大有利于提高质量（实验证明）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#前馈层</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FeedForward</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, d_model, d_ff = <span class=\"number\">2038</span>, dropout = <span class=\"number\">0.1</span></span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.linear1 = nn.Linear(d_model, d_ff)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.dropout = nn.Dropout(dropout)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.linear2 = nn.Linear(d_ff,d_model)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        x = <span class=\"variable language_\">self</span>.dropout(F.relu(<span class=\"variable language_\">self</span>.linear1(x)))</span><br><span class=\"line\">        x = <span class=\"variable language_\">self</span>.linear2(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>残差连接和归一化</p>\n<p>​\t由 Transformer 结构组成的网络结构通常都非常庞大。编码器和解码器均由很多层基本的 Transformer 块组成，每一层中都包含复杂的非线性映射，这就导致模型的训练比较困难。因此，研究人员在 Transformer 块中进一步引入了残差连接与层归一化技术，以进一步提升训练的稳定性。具体来说，残差连接主要是指使用一条直连通道直接将对应子层的输入连接到输出，避免在优化过程中因网络过深而产生潜在的梯度消失问题。</p>\n</li>\n</ol>\n<h2 id=\"解码器与编码器\"><a class=\"markdownIt-Anchor\" href=\"#解码器与编码器\">#</a> 解码器与编码器</h2>\n<p>​\t编码器端较容易实现。相比于编码器端，解码器端更复杂。具体来说，解码器的每个 Transformer 块的第一个自注意力子层额外增加了注意力掩码，对应图中的掩码多头注意力部分。这主要是因为在翻译的过程中，编码器端主要用于编码源语言序列的信息，而这个序列是完全已知的，因而编码器仅需要考虑如何融合上下文语义信息。解码器端则负责生成目标语言序列，这一生成过程是自回归的，即对于每一个单词的生成过程，仅有当前单词之前的目标语言序列是可以被观测的，因此这一额外增加的掩码是用来掩盖后续的文本信息的，以防模型在训练阶段直接看到后续的文本序列，进而无法得到有效的训练。此外，解码器端额外增加了一个多头交叉注意力模块，使用交叉注意力方法，同时接收来自编码器端的输出和当前 Transformer 块的前一个掩码注意力层的输出。查询是通过解码器前一层的输出进行投影的，而键和值是使用编码器的输出进行投影的。</p>\n<p>​\t解码器端以自回归的方式生成目标语言文本，即在每个时间步 <em>t</em>，根据编码器端输出的源语言文本表示，以及前 t <em>−</em> 1 个时刻生成的目标语言文本，生成当前时刻的目标语言单词（以我的理解来说，训练阶段是没有显示时间步概念的，通过<strong>一次性输入完整序列 + 掩码矩阵</strong>，在单次前向传播中并行计算出所有位置的输出，同时利用掩码强制模型行为与自回归一致，而推理时必须显式按时间步生成，因为未来词未知（无法并行））。</p>\n<h2 id=\"以推理生成中文翻译-我爱你-为例\"><a class=\"markdownIt-Anchor\" href=\"#以推理生成中文翻译-我爱你-为例\">#</a> 以推理生成中文翻译  <code>&quot;我爱你&quot;</code>  为例：</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">时间步</th>\n<th style=\"text-align:center\">图 1 中对应的模块流程</th>\n<th style=\"text-align:center\">具体操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>t=1</code></td>\n<td style=\"text-align:center\">词元嵌入 → 位置编码 → 掩码多头注意力 → 编码器 - 解码器注意力 → 前馈网络 → Softmax</td>\n<td style=\"text-align:center\">输入  <code>&lt;start&gt;</code> ，输出  <code>&quot;我&quot;</code>  的概率分布。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>t=2</code></td>\n<td style=\"text-align:center\">词元嵌入 ( <code>&lt;start&gt; 我</code> ) → 位置编码 → 掩码多头注意力 → … → Softmax</td>\n<td style=\"text-align:center\">输入  <code>&lt;start&gt; 我</code> ，输出  <code>&quot;爱&quot;</code>  的概率分布。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>t=3</code></td>\n<td style=\"text-align:center\">词元嵌入 ( <code>&lt;start&gt; 我爱</code> ) → 位置编码 → … → Softmax</td>\n<td style=\"text-align:center\">输入  <code>&lt;start&gt; 我爱</code> ，输出  <code>&quot;你&quot;</code>  的概率分布。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>t=4</code></td>\n<td style=\"text-align:center\">词元嵌入 ( <code>&lt;start&gt; 我爱你</code> ) → … → Softmax</td>\n<td style=\"text-align:center\">输入  <code>&lt;start&gt; 我爱你</code> ，输出  <code>&lt;end&gt;</code>  的概率分布，终止生成。</td>\n</tr>\n</tbody>\n</table>\n<p>可参考文章：<a href=\"https://blog.csdn.net/m0_64148253/article/details/140422497\">https://blog.csdn.net/m0_64148253/article/details/140422497</a></p>\n",
            "tags": [
                "LLM",
                "transformer"
            ]
        },
        {
            "id": "http://example.com/2025/05/13/DatalinkX/",
            "url": "http://example.com/2025/05/13/DatalinkX/",
            "title": "DatalinkX",
            "date_published": "2025-05-12T16:35:28.000Z",
            "content_html": "<p>DatalinkX 是一个基于 Flink 的异构数据源流转服务，用来作为数据源之间的数据同步工具，通过抽象异构数据源驱动加借助 FlinkX 开源组件屏蔽数据源间不同的通信协议，通过页面化配置数据同步任务的方式简化数据库同步流程，并通过 Xxl-Job 组件实现定时调度。</p>\n<h2 id=\"模块设置\"><a class=\"markdownIt-Anchor\" href=\"#模块设置\">#</a> 模块设置</h2>\n<ul>\n<li>业务数据管理模块：负责管理数据源和同步任务的增删改查。包含数据源管理、任务管理等。</li>\n<li>同步任务管理模块：借助 xx1-job 实现任务调度管理，确保异构数据源的定时同步和实时更新需求，同时支持批量任务管理，提高任务调度的效率。</li>\n<li>RPC 通信模块：利用 Retrofit2 实现分布式服务间的 RPC 调用，提供高效的数据请求和响应机制支持各模块间的数据传输和服务调用。</li>\n<li>数据源驱动模块：负责异构数据源的驱动配置，兼容多类型数据源的连接、读取和写入操作，为业务数据管理和同步提供支持。</li>\n<li>消息通道模块：采用 Redis Stream 实现分布式消息队列，保障各模块间的消息通信效率和数据传 5.<br>\n 输的可靠性。</li>\n<li>实时刷新前端模块：通过 SSE 技术实现数据的实时推送，配合 Ant Design 在前端即时刷新数据提供用户友好的动态体验。</li>\n<li>公共模块：包含系统基础功能、工具方法和通用接口，实现各模块间的共享，提升系统的可维护性和复用性。</li>\n<li>FlinkX 模块：负责人规模数据的实时同步、数据清洗和格式转换，支持流式和批量数据的整合处理，为系统提供数据支持。<br>\n数据清洗与转换模块：基于 Flinkx 的清洗能力，对不同数据源的数据进行标准化、过滤和转换以确保进入系统的数据一致性。</li>\n</ul>\n<h2 id=\"重要模块\"><a class=\"markdownIt-Anchor\" href=\"#重要模块\">#</a> 重要模块</h2>\n<ul>\n<li>\n<h3 id=\"消息队列sse实现实时推送\"><a class=\"markdownIt-Anchor\" href=\"#消息队列sse实现实时推送\">#</a> 消息队列 + SSE 实现实时推送</h3>\n<ol>\n<li>首先基于自定义注解 @messageHub 标注消费者方法，在程序运行初始化完 Bean 之后，实现对每个 Bean 进行循环检查，寻找带该注解的方法，找到后将其注册成消费者。</li>\n<li>基于 Redis 的 stream 数据结构实现轻量级的消息队列，出于两点原因选择该方式，首先是本项目只需要使用消息队列实现任务状态和任务进度的推送，不需要严格意义上的高可用、低延迟，其次是 RabbitMQ 或者是 Kafka 服务的复杂性，一个健壮的项目并不是引入越多的中间件会越好，而是 Bug 越少越好，或者说出 Bug 概率越低越好。而 Redis 的 stream 借助了很多 Kafka 的设计思路，而且更轻量级。</li>\n<li>消费者的注册，其实是非常简单的一件事，只需要带有 @messageHub 的，就创建一个线程监听注解中配置的消息地址，监听到消息后回调给该消费者，并返回 ACK 标记消息已被消费，如果在消费过程中出现故障，则会继续在 pending 队列中消费，一般会重试 4 次，如果消费不了，只能是放弃，因为这并不是一个十分重要的操作，丢失部分进度消息是用户能够接收的。</li>\n<li>基于 SSE 实例实现消息实时推送，SSE 是使用流信息向浏览器进行信息推送，也就是信息不是一次性的，而是连续不断的，类似于视频的播放。SSE 是一个单向通信，只能服务器向浏览器发送，这里不选择 websocket 的原因和 2 一样，基于业务层面去考虑。</li>\n</ol>\n</li>\n<li>\n<h3 id=\"抽象数据源driver设计\"><a class=\"markdownIt-Anchor\" href=\"#抽象数据源driver设计\">#</a> 抽象数据源 Driver 设计</h3>\n<p>​       该项目是支持异构数据源同步的，所以会有很多种数据源，进行每种数据源连接是确实可以使用 if else 去定义，但是这并不好维护，而且可拓展性十分差，想象一下每次新增一个数据源就写多一个 if else，代码的可读性也会很差，所以这里会基于模板模式和工厂模式对数据源驱动的获取进行抽象。</p>\n<p>​\t我们把数据源实例抽象为几个步骤，读写分离，然后分别定义为接口，将支持 JDBC 的数据源做一种实现，不支持 JDBC 的数据源也做一种实现。每种实现又有一个基础类去实现基础功能。</p>\n<p>如下图所示：</p>\n<p><img src=\"image1.png\" alt=\"image1\"></p>\n<ol>\n<li>\n<p>DsDriverFactory 遵循工厂设计原则，每个数据源必要信息通过压缩算法返回一个唯一字符串 connectld，DsDriverFactory 向外暴露 getDsReader、getDsWriter 方法，通过解析 connectld 得到数据源 type，根据数据源 type 获取对应 Driver.class 并通过反射生成对应的驱动对象。</p>\n</li>\n<li>\n<p>要新增数据源，比如新增一个 Mysql 的数据源，那么只需要继承 JDBC 这个类，JDBC 这个类已经实现了部分基本的功能，并制定了相应的执行流程，Mysql 继承之后，只需要把获取数据源 JdbcUrl 这种每个数据源都不同的抽象方法给实现了就行。</p>\n</li>\n<li>\n<p>总体流程就是，用户提交了注册新数据源的信息之后，注册信息会存入数据库中，等到创建流转任务时，会获取数据源下的数据表，这时就调用 DsDriverFactory 获取数据源实例，并调用实例中的方法获取对应的数据 / 写入数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PACKAGE_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;com.datalinkx.driver.dsdriver.&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getDriverClass</span><span class=\"params\">(String driverName)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> PACKAGE_PREFIX + driverName.toLowerCase() + <span class=\"string\">&quot;driver&quot;</span> + <span class=\"string\">&quot;.&quot;</span> + ConnectIdUtils.toPascalCase(driverName) + <span class=\"string\">&quot;Driver&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//getDriver 方法依赖于 ConnectIdUtils 和 getDriverClass 方法来确定应该加载和实例化哪个驱动类。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDsDriver <span class=\"title function_\">getDriver</span><span class=\"params\">(String connectId)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">dsType</span> <span class=\"operator\">=</span> ConnectIdUtils.getDsType(connectId);</span><br><span class=\"line\">        <span class=\"comment\">//拼接地址，也就是包的地址，来获取对应的类名，并返回给DsServiceImpl类，让他知道用的是哪个实现类，这就是用来替代无数个if else的关键地方</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">driverClassName</span> <span class=\"operator\">=</span> getDriverClass(dsType);</span><br><span class=\"line\">        Class&lt;?&gt; driverClass = Class.forName(driverClassName);</span><br><span class=\"line\">        Constructor&lt;?&gt; constructor = driverClass.getDeclaredConstructor(String.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (IDsDriver) constructor.newInstance(connectId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IStreamDriver <span class=\"title function_\">getStreamDriver</span><span class=\"params\">(String connectId)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">dsType</span> <span class=\"operator\">=</span> ConnectIdUtils.getDsType(connectId);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">driverClassName</span> <span class=\"operator\">=</span> getDriverClass(dsType);</span><br><span class=\"line\">        Class&lt;?&gt; driverClass = Class.forName(driverClassName);</span><br><span class=\"line\">        Constructor&lt;?&gt; constructor = driverClass.getDeclaredConstructor(String.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (IStreamDriver) constructor.newInstance(connectId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDsReader <span class=\"title function_\">getDsReader</span><span class=\"params\">(String connectId)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * getDriver(connectId) 返回的是一个 IDsDriver 类型的对象，然后将其强制转换为 IDsReader 类型。这种转换能够成功执行的前提是：</span></span><br><span class=\"line\"><span class=\"comment\">         * IDsReader 接口继承自 IDsDriver 接口：如果 IDsReader 接口是 IDsDriver 接口的子接口，那么所有的 IDsReader 实现也必然是 IDsDriver 的实现。</span></span><br><span class=\"line\"><span class=\"comment\">         * 这种情况下，转换是合法的，因为 IDsReader 是 IDsDriver 的子类型。</span></span><br><span class=\"line\"><span class=\"comment\">         * 实现类的兼容性：调用 getDriver(connectId) 方法返回的具体实现类必须同时实现了 IDsDriver 和 IDsReader 接口。这是类型转换能够成功的关键。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (IDsReader) getDriver(connectId);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InstantiationException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">&quot;driver load error&quot;</span>, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;driver load error&quot;</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Exception</span>(<span class=\"string\">&quot;can not initialize driver&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDsWriter <span class=\"title function_\">getDsWriter</span><span class=\"params\">(String connectId)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (IDsWriter) getDriver(connectId);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InstantiationException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">&quot;driver load error&quot;</span>, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;driver load error&quot;</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Exception</span>(<span class=\"string\">&quot;can not initialize driver&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>\n<h3 id=\"xxl-job平台\"><a class=\"markdownIt-Anchor\" href=\"#xxl-job平台\">#</a> XXL-Job 平台</h3>\n<p>​\txxl-job 是一个分布式任务调度平台，核心思想是将调度任务抽象成为调度器和执行器，平台本身不承担业务逻辑，只负责发起调度请求后，由执行器接收调度请求并执行任务，这里的任务被抽象为分散的 JobHandler。JobHandler 分散到各个业务代码中，依 netty 保持与调度器的交互，通过这种方式即可实现调度与任务相互解耦，从而提高系统整体的稳定性和拓展性。如下图：</p>\n<p><img src=\"image2.png\" alt=\"image2\"></p>\n<ol>\n<li>\n<p>调度器只需要借助 maven 打包 xxl-job 的 admin 即可，然后 java -jar 把 jar 包运行起来即可，或者是用 docker 直接部署，而执行器则放在项目中的 Job 模块下，使用 @XxlJob (“XXX”) 在方法上定义执行器即可</p>\n</li>\n<li>\n<p>为了解决 xxl-job 登录的问题，这里会使用一个拦截器，拦截器逻辑非常朴实无华，在发请求之前，判断 cookieValue 是否存在，如果不存在就通过 datalinkx-client 的能力发起一次登录请求。登陆后保存 cookie 加到原请求中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Response <span class=\"title function_\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Request</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> chain.request();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tResponse response;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (StringUtils.isEmpty(cookieValue)) &#123;</span><br><span class=\"line\">\t\t\t\tretrofit2.<span class=\"type\">Response</span> <span class=\"variable\">loginResp</span> <span class=\"operator\">=</span> xxlLoginClient.login(username, passwd, <span class=\"string\">&quot;on&quot;</span>).execute();</span><br><span class=\"line\">\t\t\t\tcookieValue = loginResp.headers().get(SET_COOKIE_HEADER);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (StringUtils.isNotEmpty(cookieValue)) &#123;<span class=\"comment\">//检查是否成功获取了 Cookie 值</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果获取了 Cookie，则创建一个新的请求，将 Cookie 添加到请求头中</span></span><br><span class=\"line\">\t\t\t\t<span class=\"type\">Request</span> <span class=\"variable\">newRequest</span> <span class=\"operator\">=</span> chain.request().newBuilder()</span><br><span class=\"line\">\t\t\t\t\t\t.addHeader(HEADER_COOKIE, cookieValue)</span><br><span class=\"line\">\t\t\t\t\t\t.build();</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//使用新的请求继续执行链式调用，获取响应</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//当前拦截器已经完成了对请求的处理，将请求传递给拦截器链中的下一个拦截器继续处理</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 最后一个拦截器处理请求后，不再调用 proceed，而是直接将请求发送到服务器。服务器的响应返回，按相反顺序通过拦截器链。</span></span><br><span class=\"line\">\t\t\t\tresponse = chain.proceed(newRequest);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tlog.error(<span class=\"string\">&quot;xxl-job login error&quot;</span>);</span><br><span class=\"line\">\t\t\t\tresponse = chain.proceed(chain.request());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (response.code() == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">ResponseBody</span> <span class=\"variable\">responseBody</span> <span class=\"operator\">=</span> response.body();</span><br><span class=\"line\">\t\t\t<span class=\"type\">MediaType</span> <span class=\"variable\">contentType</span> <span class=\"operator\">=</span> responseBody != <span class=\"literal\">null</span> ? responseBody.contentType() : <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (contentType != <span class=\"literal\">null</span> &amp;&amp; contentType.subtype().equals(<span class=\"string\">&quot;json&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">bodyString</span> <span class=\"operator\">=</span> getBody(response);</span><br><span class=\"line\">\t\t\t\tbodyString = bodyString.replaceFirst(<span class=\"string\">&quot;\\&quot;result\\&quot;:\\\\s*\\&quot;\\\\s*\\&quot;&quot;</span>, <span class=\"string\">&quot;\\&quot;result\\&quot;: null&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">ResponseBody</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> ResponseBody.create(contentType, bodyString);</span><br><span class=\"line\">\t\t\t\tresponse = response.newBuilder().body(body).build();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> response;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>\n<p>流转任务的生命钩子函数设计</p>\n<p>​\t通常的模板方法模式中会设计一个 abstract 的抽象方法，交给它的子类实现，这个方法称为模板方法。而钩子方法，是对于抽象方法或者接口中定义的方法的一个空实现，也是模板方法模式的一种实现方式。设计钩子方法的主要目的是干预执行流程，使得控制行为流程更加灵活，更符合实际业务的需求。在该项目流转任务的生命周期都是基于钩子方法 + 模板实现的，任务由 xxl-job 调度中心通过 netty 回调到 DataTransHandler 执行器中，执行器中注入任务触发类 DataTransferAction，由 doAction 开始一次任务的执行，而 FlinkAction 是继承的 AbstractDataTransferAction 实现各种模板和钩子方法:</p>\n<p>​\t六个钩子方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">begin</span><span class=\"params\">(D info)</span>;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">end</span><span class=\"params\">(D info, <span class=\"type\">int</span> status, String errmsg)</span>;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeExec</span><span class=\"params\">(U unit)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(U unit)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"type\">boolean</span> <span class=\"title function_\">checkResult</span><span class=\"params\">(U unit)</span>;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterExec</span><span class=\"params\">(U unit, <span class=\"type\">boolean</span> success, String errorMsg)</span>;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> U <span class=\"title function_\">convertExecUnit</span><span class=\"params\">(D info)</span>;</span><br></pre></td></tr></table></figure>\n<p>​\tdoAction 串联生命周期：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doAction</span><span class=\"params\">(T actionInfo)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取job详情</span></span><br><span class=\"line\">    <span class=\"type\">D</span> <span class=\"variable\">detail</span> <span class=\"operator\">=</span> getJobDetail(actionInfo);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">StringBuffer</span> <span class=\"variable\">error</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 准备执行job</span></span><br><span class=\"line\">        begin(detail);</span><br><span class=\"line\">        <span class=\"comment\">// ....</span></span><br><span class=\"line\">        <span class=\"comment\">// 遍历执行启动flink任务</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 每个单元执行前的准备</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isStop()) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">&quot;logkill trigger&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            beforeExec(unit)</span><br><span class=\"line\">            <span class=\"comment\">// 启动任务</span></span><br><span class=\"line\">            execute(unit);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;user stop&quot;</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;execute flink task error.&quot;</span>, e);</span><br><span class=\"line\">            unitCount.decrementAndGet();</span><br><span class=\"line\">            afterExec(unit, <span class=\"literal\">false</span>, e.getMessage());</span><br><span class=\"line\">            error.append(e.getMessage()).append(<span class=\"string\">&quot;\\r\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 整个Job结束后的处理</span></span><br><span class=\"line\">        end(detail, error.length() == <span class=\"number\">0</span> ? JOB_STATUS_SUCCESS : JOB_STATUS_ERROR, error.length() == <span class=\"number\">0</span> ? <span class=\"string\">&quot;success&quot;</span> : error.toString());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        log.error(<span class=\"string\">&quot;Stop task by user.&quot;</span>);</span><br><span class=\"line\">        JobUtils.cntx().setCanceled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        end(detail, JOB_STATUS_STOP, <span class=\"string\">&quot;cancel the job&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">        log.error(<span class=\"string\">&quot;sync failed&quot;</span>, e);</span><br><span class=\"line\">        end(detail, JOB_STATUS_ERROR, e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t这个方法可谓是整个 datalinkx 的灵魂，核心中的核心，最核心的代码，我们通过这个方法将一个流转任务的生命周期串联起来。<br>\n这样真正的实现类 DataTransferAction.java 只需要继承 AbstractDataTransferAction 实现各个具体的生命周期方法即可，Xx1-Job 回调来的方法直接调用 FlinkAction 继承的 doAction 方法即可将任务串联执行。</p>\n</li>\n</ul>\n",
            "tags": [
                "datalinkx"
            ]
        },
        {
            "id": "http://example.com/2025/05/12/LLM-concept/",
            "url": "http://example.com/2025/05/12/LLM-concept/",
            "title": "LLM-concept",
            "date_published": "2025-05-12T07:54:00.000Z",
            "content_html": "<h1 id=\"大模型基本概念\"><a class=\"markdownIt-Anchor\" href=\"#大模型基本概念\">#</a> 大模型基本概念</h1>\n<h2 id=\"目标\"><a class=\"markdownIt-Anchor\" href=\"#目标\">#</a> 目标</h2>\n<ul>\n<li>\n<p>语言模型就是对自然语言的概率分布进行建模，即 P (w1 w2 w3 … wn)，计算这些词构成的这句话成为合法的一句话的概率</p>\n</li>\n<li>\n<p>计算下一个词的概率 P (wn | w1 w2 w3… wn-1)</p>\n<p><img src=\"image1.png\" alt=\"image\"></p>\n</li>\n</ul>\n<h2 id=\"发展历程\"><a class=\"markdownIt-Anchor\" href=\"#发展历程\">#</a> 发展历程</h2>\n<p>从 n-gram:</p>\n<p><img src=\"image2.png\" alt=\"image\"></p>\n<p>到 neural language model: 每个词都映射成一个低维向量</p>\n<p><img src=\"image3.png\" alt=\"image\"></p>\n<p>再到后面的 transformer 出现，transformer 的出现，NLP 进入了预训练微调阶段，也就是只需把预训练好的模型用特定任务的训练集去微调（fine-tune），即可对下游任务进行操作，这种模型是 PLM。</p>\n<p>随着 OpenAI 发布的 1750 亿个参数（GPT-3），开启 LLM 时代</p>\n<h2 id=\"问题发现\"><a class=\"markdownIt-Anchor\" href=\"#问题发现\">#</a> 问题发现</h2>\n<p>・大模型（如 GPT-3）参数量极大（1750 亿 +），传统 “预训练 + 微调” 范式成本过高（需为每个任务调整海量参数）。</p>\n<ol>\n<li>\n<p>解决方案：<br>\n・开发新范式（ICL/Prompt），通过输入指令或示例直接引导模型，避免微调。</p>\n<p>・但要让模型支持这种范式，必须在预训练阶段就赋予它相关能力（如理解指令、模仿示例）。</p>\n</li>\n<li>\n<p>模型构建的关键：<br>\n・预训练阶段：用海量多样化数据（图书、网页、指令数据等）训练模型，使其隐式掌握 ICL/Prompt 所需的能力（如任务模式识别、指令遵循）。</p>\n<p>・后续阶段（SFT+RLHF）：进一步优化模型对新范式的响应质量（如更精准的指令理解、更安全的输出）。</p>\n</li>\n<li>\n<p>结论：<br>\n・新范式（ICL/Prompt）依赖特定训练的模型：只有通过大规模预训练（及后续优化）的模型，才能直接通过上下文或指令适配任务，而传统小模型无法做到这一点。</p>\n</li>\n</ol>\n<h2 id=\"llm的构建流程\"><a class=\"markdownIt-Anchor\" href=\"#llm的构建流程\">#</a> LLM 的构建流程</h2>\n<ul>\n<li>预训练： 利用海量训练数据构建多样化内容，构建基础模型 ——&gt; 对长文本建模，使模型具有语言生成能力</li>\n<li>有监督微调 SFT：用少量高质量数据集，通过有监督训练使模型具有问答、写作的能力，数据包括：用户输入提示词和对应理想输出结果</li>\n<li>奖励建模 RM：训练一个能够判断文本质量的裁判，对同个提示词，比较 SFT 生成的多个输出的质量</li>\n<li>强化学习 RLHF (human feedback)：基于 RM，优化 SFT 模型</li>\n</ul>\n<p>SFT 相当于学生学会答题，RM 是评分老师，判断 answer 好坏，RLHF 是学生根据老师评分改进答题策略</p>\n<h2 id=\"补充\"><a class=\"markdownIt-Anchor\" href=\"#补充\">#</a> 补充</h2>\n<p><strong>N-gram 模型详解</strong><br>\n N-gram 是一种基于统计的语言模型，用于预测或生成文本中的下一个词，其核心思想是：一个词的出现概率依赖于它前面的有限个词（n-1 个词）。它是自然语言处理（NLP）中最基础且广泛使用的模型之一。</p>\n<p>N-gram 的定义：</p>\n<p>・指文本中连续的 <em>n</em> 个词（或字符）组成的序列。</p>\n<p>・例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">◦ Unigram (1-gram): &quot;the&quot;、&quot;cat&quot;、&quot;sat&quot;（单个词）。  </span><br><span class=\"line\"></span><br><span class=\"line\">◦ Bigram (2-gram): &quot;the cat&quot;、&quot;cat sat&quot;、&quot;sat on&quot;（两个连续词）。  </span><br><span class=\"line\"></span><br><span class=\"line\">◦ Trigram (3-gram): &quot;the cat sat&quot;、&quot;cat sat on&quot;（三个连续词）。  </span><br></pre></td></tr></table></figure>\n<p>・核心假设：</p>\n<p>・马尔可夫假设：当前词的概率仅依赖于前 <em>n-1</em> 个词，而非整个历史。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">◦ 例如，Bigram 模型认为 `P(sat | the cat)` ≈ `P(sat | cat)`，忽略更早的上下文。</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>如何计算概率？</strong><br>\nN-gram 通过统计语料库中词序列的频率来估计概率：</p>\n<p>计算  <code>P(sat | the cat)</code> ：</p>\n<p>P(sat∣the cat)=Count(“the cat”)Count(“the cat sat”)</p>\n<p>若语料中 “the cat” 出现 100 次，“the cat sat” 出现 30 次，则  <code>P(sat | the cat) = 0.3</code> 。</p>\n<p><strong>N-gram 的优缺点</strong></p>\n<table>\n<thead>\n<tr>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>简单高效，计算速度快。</td>\n<td>无法捕捉长距离依赖（如 “The cat… sat” 相隔较远时）。</td>\n</tr>\n<tr>\n<td>小规模数据即可训练。</td>\n<td>数据稀疏性（罕见 n-gram 概率不准确）。</td>\n</tr>\n<tr>\n<td>曾广泛用于机器翻译、拼写检查等任务。</td>\n<td>无法理解语义（仅统计共现频率）。</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "LLM",
                "concept"
            ]
        },
        {
            "id": "http://example.com/2025/05/11/resume/",
            "url": "http://example.com/2025/05/11/resume/",
            "title": "resume",
            "date_published": "2025-05-11T07:54:37.000Z",
            "content_html": "<h1 id=\"resume\"><a class=\"markdownIt-Anchor\" href=\"#resume\">#</a> Resume</h1>\n<h2 id=\"教育经历\"><a class=\"markdownIt-Anchor\" href=\"#教育经历\">#</a> 教育经历</h2>\n<ul>\n<li>深圳大学（硕士） 2024-2027 计算机技术 硕士一等奖学金</li>\n<li>广东财经大学（本科） 2020-2024 计算机科学与技术 学业奖学金  CET-6 蓝桥杯省赛二等奖</li>\n</ul>\n<h2 id=\"实习经历\"><a class=\"markdownIt-Anchor\" href=\"#实习经历\">#</a> 实习经历</h2>\n<ul>\n<li>\n<p>近期：深圳迅策科技股份有限公司 \t    \t后端研发实习生 技术支持中心 — 政府项目组</p>\n<p>后端研发实习生 技术支持中心 — 政府项目组</p>\n<ul>\n<li>工作描述：负责智慧交通平台道路信息服务的后端研发</li>\n<li>参与问题定位开发：使用 AOP 并结合自定义注解获取全局请求与处理信息，增强 API 的可追踪性和调试效率，通过此配置团队成员可以快速定位问题和分析系统行为，提高开发效率</li>\n<li>数据表设计与查询优化：独立完成交通流量、违法信息、道路信息等 5 个模块的数据设计，包含数据表设计、字段抽象与设计，同时在百万级数据的交通流量表设计上建立索引，将平均回表次数从 160w 次优化为 200 次</li>\n<li>道路模块开发：负责相关需求开发，并基于内部 CI/CD 平台搭建自动化测试流水线，保证在提交测试前各接口单元测试覆盖率达到 70% 以上，核心链路全覆盖</li>\n</ul>\n</li>\n<li>\n<p>其他：望海康信、CVTE</p>\n</li>\n</ul>\n<h2 id=\"项目经历\"><a class=\"markdownIt-Anchor\" href=\"#项目经历\">#</a> 项目经历</h2>\n<ul>\n<li>生物大语言模型集成平台\t2024.10 - 2024.12\t论文转化成果网站（后端开发成员）\n<ul>\n<li>项目描述：生物语言模型集成平台是一个面向生物医学研究领域的工具类网站，旨在整合实验室研发的多种大语言模型，为研究人员提供便捷的模型调用和数据分析服务，并且还提供实验室研究成果展示等功能。本人负责部分模块后端开发，同时负责工作分配以及把控进度。</li>\n<li>项目技术栈：SpringCloud + SpringBoot + Mybatis</li>\n<li>服务拆分：基于跨语言与团队成员擅长技术的需求，将平台拆分为网关、模型处理、数据管理服务三个独立模块，并结合 Nacos 注册中心、Feign 远程调用技术</li>\n<li>登录与用户管理：利用 Spring Cloud Gateway 接口，解析和验证 JWT 令牌，并传递用户信息至下游服务，实现服务间用户信息共享。对用户密码采取 BCrypt 密码加密方式，有效保障用户账号安全</li>\n<li>代码重构：分析所负责项目中多个相似的查询请求，通过自动化 Mapper 接口与实体类的映射，同时结合动态构建查询条件，实现了通用查询框架，提高了代码的复用性，减少了至少 7 个 Mapper 接口编码工作</li>\n<li>异步执行与存储优化：将模型调用的同步执行操作，结合 Mq 技术，转化为异步操作，实现平均响应时间从 2000ms + 降低至 300ms 内，并基于 MinIO 部署专用文件存储服务器，实现文件转存，减少本地服务器压力</li>\n</ul>\n</li>\n<li>异构数据源同步平台      2023.10 - 2023.12     后端开发</li>\n<li>项目描述：该系统是一个基于 Flink 的异构数据源流转服务，用来作为数据源之间的数据同步工具，通过抽象异构数据源驱动，同时屏蔽数据源间不同的通信协议，通过页面化配置数据同步任务的方式简化数据库同步流程，并实现定时调度。</li>\n<li>项目技术栈：Flink + Chunjun + Xxl-Job + Redis + Retrofit2</li>\n<li>数据源 Driver 设计：使用工厂设计模式、模板设计模式抽象化数据源的交互逻辑，同时支持灵活扩展数据源</li>\n<li>流转进度推送：基于 Redis stream 搭建轻量级消息队列，同时结合 SSE 实例实现任务流转进度即时刷新</li>\n<li>任务调度：借助 Xxl-Job 实现任务调度管理，确保异构数据源的定时同步和实时更新需求，支持批量任务管理</li>\n<li>数据同步：使用钩子方法覆盖流转任务完整生命周期，并定义模板方法以高度可扩展的方式串联任务生命周期</li>\n</ul>\n<h2 id=\"专业技能\"><a class=\"markdownIt-Anchor\" href=\"#专业技能\">#</a> 专业技能</h2>\n<ul>\n<li>熟悉 Java 基础编程，具有良好的面向对象编程思想、熟悉多线程、集合等知识</li>\n<li>熟悉 SpringBoot、SpringCloud、Mybatis 等开发框架，了解微服务架构以及 Nacos、Gateway 等组件的使用</li>\n<li>熟悉 Mysql 数据库的使用，对索引、锁机制、事务、日志、数据库范式有一定理解</li>\n<li>熟悉 Redis 的使用，熟悉五种常见数据类型，对缓存持久化、缓存穿透、缓存击穿有一定理解</li>\n<li>熟悉 Linux 系统以及常用命令的使用，对 Docker、Kubernetes 有一定的理解</li>\n<li>熟悉计算机网络原理，对 OSI 七层模型、TCP/UDP、HTTP/HTTPS 协议有一定理解</li>\n<li>熟悉操作系统基础知识，对进程调度、内存管理、虚拟内存等有一定理解</li>\n</ul>\n",
            "tags": [
                "resume"
            ]
        }
    ]
}
<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>Phoenix</title>
    <link href="http://example.com" />
    <updated>2025-05-19T10:50:11.000Z</updated>
    <category term="datalinkx" />
    <category term="LLM" />
    <category term="concept" />
    <category term="Bert" />
    <category term="GPT" />
    <category term="混合专家模型" />
    <category term="LLaMA" />
    <category term="resume" />
    <category term="transformer" />
    <entry>
        <id>http://example.com/2025/05/19/LLaMA-%E6%B7%B7%E5%90%88%E4%B8%93%E5%AE%B6%E6%A8%A1%E5%9E%8B/</id>
        <title>LLaMA&amp;混合专家模型</title>
        <link rel="alternate" href="http://example.com/2025/05/19/LLaMA-%E6%B7%B7%E5%90%88%E4%B8%93%E5%AE%B6%E6%A8%A1%E5%9E%8B/"/>
        <content type="html">&lt;h2 id=&#34;LLaMA-model-structure&#34;&gt;&lt;a href=&#34;#LLaMA-model-structure&#34; class=&#34;headerlink&#34; title=&#34;LLaMA  model  structure&#34;&gt;&lt;/a&gt;LLaMA  model  structure&lt;/h2&gt;&lt;p&gt;​	LLaMA是基于transformer的decoder部分构建的，采用前置层归一化、使用RMSNorm规划函数，激活函数更改为SwiGLU，使用旋转位置嵌入更改的decoder模型。更改的位置如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image1.png&#34; alt=&#34;image1&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;RMSNorm函数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image2.png&#34; alt=&#34;image2&#34;&gt;&lt;/p&gt;
&lt;p&gt;原始层归一化函数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image3.png&#34; alt=&#34;image2&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;对比&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;LayerNorm&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;RMSNorm&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;归一化目标&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;均值中心化 + 方差缩放&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;仅均方根（RMS）缩放&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;计算复杂度&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;较高（需计算均值和方差）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;较低（仅需均方值）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;参数数量&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;em&gt;γ&lt;/em&gt;+&lt;em&gt;β&lt;/em&gt;（2d 参数）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;仅 &lt;em&gt;γ&lt;/em&gt;（d 参数）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SwiGLU&lt;/p&gt;
&lt;p&gt;SwiGLU是门控线性单元（GLU）的变体，公式如下：&lt;br&gt;&lt;img src=&#34;/image4.png&#34; alt=&#34;image2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image5.png&#34; alt=&#34;image2&#34;&gt;&lt;/p&gt;
&lt;p&gt;第二个公式的激活函数是sigmoid，sigmoid函数特点：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/image6.png&#34; alt=&#34;image2&#34;&gt;&lt;/p&gt;
&lt;p&gt;当β趋向于0时，相当于y&amp;#x3D;x&amp;#x2F;2，线性函数，当β趋向于无穷时（x&amp;gt;0,x&amp;lt;0,x&amp;#x3D;0)，相当于ReLU函数，当β&amp;#x3D;1，swish光滑且非单调。&lt;/p&gt;
&lt;p&gt;Swish(xW)为门控权重（相当于选择遗忘比例），用权重对xV逐元素加权，用W2映射回原维度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;RoPE（待）&lt;/p&gt;
&lt;p&gt;传统PE，model需要学习隐式位置关系，而RoPE通过旋转矩阵直接编码位置，即将位置信息通过旋转矩阵融合key\query向量中，直接建模相对位置依赖关系，value是不需要旋转的:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image7.png&#34; alt=&#34;image2&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上三个改变与原decoder结合实现了LLaMA&lt;/p&gt;
&lt;h2 id=&#34;注意力机制优化&#34;&gt;&lt;a href=&#34;#注意力机制优化&#34; class=&#34;headerlink&#34; title=&#34;注意力机制优化&#34;&gt;&lt;/a&gt;注意力机制优化&lt;/h2&gt;&lt;p&gt;在 Transformer 结构中，自注意力机制的时间和存储复杂度与序列的长度呈平方的关系，因此占用了大量的计算设备内存并消耗了大量的计算资源，比如：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;input&lt;/span&gt;: Q K &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Q = [](seq_len*vector_len)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;K = [](seq_len*vector_len)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Q*K(转置) = seq_len * seq_len&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;那么就有这种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;显存占用&lt;/strong&gt;：&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计算时间&lt;/strong&gt;：&lt;br&gt;每次注意力计算需 seq_len方 * d 次操作，&lt;em&gt;seq_len&amp;#x3D;32&lt;/em&gt;k*, &lt;em&gt;d&lt;/em&gt;&amp;#x3D;1024 时约为 10的12 次方次操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以需要方法去优化这一问题，以下举例两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;稀疏注意力&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局注意力：在稀疏注意力中保留少量全局节点（如 [CLS] token 或特定位置），这些节点可以与序列中&lt;strong&gt;所有其他位置&lt;/strong&gt;交互。&lt;/li&gt;
&lt;li&gt;带状注意力：每个 Query 只与&lt;strong&gt;固定宽度邻域内&lt;/strong&gt;的 Key 交互（类似对角带状矩阵）&lt;/li&gt;
&lt;li&gt;膨胀注意力：以&lt;strong&gt;固定间隔跳跃采样&lt;/strong&gt; Key&lt;/li&gt;
&lt;li&gt;随机注意力：每个 Query 随机选择 &lt;em&gt;r&lt;/em&gt; 个位置进行交互&lt;/li&gt;
&lt;li&gt;局部块注意力：多个不重叠块交互&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般利用上述的复合模式s&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;低秩注意力:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image8.jpg&#34; alt=&#34;image2&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;混合专家模型&#34;&gt;&lt;a href=&#34;#混合专家模型&#34; class=&#34;headerlink&#34; title=&#34;混合专家模型&#34;&gt;&lt;/a&gt;混合专家模型&lt;/h2&gt;&lt;p&gt;​	混合专家模型 (MixedExpert Models，MoEs) 日益受到关注。依据大模型缩放法则，模型规模是提升性能的关键，然而规模扩大必然使计算资源大幅增加。因此，在有限计算资源预算下，如何用更少训练步数训练更大模型成为关键问题。为解决该问题，混合专家模型基于一个简洁的思想：模型不同部分（即“专家”）专注不同任务或数据层面。&lt;/p&gt;
&lt;p&gt;其实就是把模型内部的一组专用子网络，每个子网络负责处理数据中特定类型的任务，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入句子是数学问题 → 激活“数学专家”&lt;/li&gt;
&lt;li&gt;输入是诗歌 → 激活“文学专家”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优势：若model有100个专家，每次输入仅用2个，计算量少，而且每个专家通过训练集中学习特定模式，比通用模块更高效。&lt;/p&gt;
&lt;p&gt;混合专家模型按照门控网络（Gate）类型，可以从广义上讲可以分为三个大类：稀疏混合专家模型（Sparse MoE）、稠密混合专家模型（Dense MoE）、软混合专家模型（Soft MoE）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;稀疏混合专家模型：input之后，门控网络仅激活少数专家&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;稠密混合专家模型：所有专家激活，甲醛组合输出，这个是要计算每个wi,bi与x的结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;软混合专家模型：门控网络分配的权重直接融合不同专家的参数，得到w(融合)，b(融合)，融合与x计算&amp;#x3D;w*x+b&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;专家激活方式&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;计算量&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;参数量扩展性&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;典型场景&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;稀疏MoE&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;硬性Top-k选择（如k&amp;#x3D;2）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;em&gt;O&lt;/em&gt;(&lt;em&gt;k&lt;/em&gt;⋅FFN)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;极高（万亿级）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;大规模预训练（Mixtral, GPT-4）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;稠密MoE&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;所有专家加权求和&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;⋅FFN)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;低（十亿级）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;小规模多任务学习&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;软MoE&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;软性稀疏权重&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;⋅FFN)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;中（百亿级）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;平衡效率与稳定性需求&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="混合专家模型" />
        <category term="LLaMA" />
        <updated>2025-05-19T10:50:11.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2025/05/17/GPT-BertBuild/</id>
        <title>GPT&amp;BertBuild</title>
        <link rel="alternate" href="http://example.com/2025/05/17/GPT-BertBuild/"/>
        <content type="html">&lt;h2 id=&#34;生成式预训练语言模型GPT&#34;&gt;&lt;a href=&#34;#生成式预训练语言模型GPT&#34; class=&#34;headerlink&#34; title=&#34;生成式预训练语言模型GPT&#34;&gt;&lt;/a&gt;生成式预训练语言模型GPT&lt;/h2&gt;&lt;p&gt;GPT的模型结构，由多个transformer的decoder组成，结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image1.png&#34; alt=&#34;image1&#34;&gt;&lt;/p&gt;
&lt;p&gt;该模型利用的是transformer的解码器部分，训练和推理的过程是类似的，12层transformer模块都在做类似的事情，到最后一层后输出预测的分数（映射到词分类中，得到预测的分数&amp;#x2F;置信度）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;有监督下游任务微调：&lt;/p&gt;
&lt;p&gt;在进行下游任务微调时，仅使用GPT的最后一层的最后一个词的隐藏状态，同个全连接层映射到标签空间。因为每个词的隐藏状态都聚合了左侧所有历史词的信息，因此最后一个词的隐藏状态天然编码了整个序列的全局语义。&lt;/p&gt;
&lt;p&gt;同时再进行微调的时候，可能会出现模型遗忘预训练阶段学习的通用只是表示，损失通用与泛化能力，出现灾难性遗忘的问题，所以通常采用混合预训练任务损失和下游微调损失缓解这一问题，Loss Function如下:&lt;br&gt;&lt;img src=&#34;/image2.png&#34; alt=&#34;image2&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Bert模型构建&#34;&gt;&lt;a href=&#34;#Bert模型构建&#34; class=&#34;headerlink&#34; title=&#34;Bert模型构建&#34;&gt;&lt;/a&gt;Bert模型构建&lt;/h2&gt;&lt;p&gt;Bert模型一般是基于Transformer的编码器部分构建的，是一个相当于完形填空(mask)的模型，是考虑双向的模型（同时利用两侧信息）&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;input&lt;/span&gt;:the cat site on the mat&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tokenizer(分词):（假设不加入CLS标记和SEP标记）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    code:[&lt;span class=&#34;number&#34;&gt;1996&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4248&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2825&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2007&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1996&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3829&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &lt;span class=&#34;comment&#34;&gt;# 0为pad的编码，max假设为8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    attention_mask:[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &lt;span class=&#34;comment&#34;&gt;# 0表示填充的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;random mask:选取到了site作为掩码，替换为mask的编码-&amp;gt;&lt;span class=&#34;number&#34;&gt;103&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	code:[&lt;span class=&#34;number&#34;&gt;1996&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4248&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;103&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2007&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1996&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3829&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    attention_mask:[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    label:[-&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,-&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2825&lt;/span&gt;,-&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,-&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,-&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,-&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,-&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;] &lt;span class=&#34;comment&#34;&gt;#这个是用于计算掩码的真实标签，-100表示不需要计算，只保留被掩码的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;train:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    将上述数据送入Bert模型中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;output:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        [..,..,..,..,],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        [..,..,..,..,],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        [..,..,..,..,], &lt;span class=&#34;comment&#34;&gt;#取第二个位置进行计算交叉熵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        [..,..,..,..,],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ........&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;训练过程：加载dataset,切分traindataset和testdataset –&amp;gt; 用traindataset训练词元分析器，形成vocab词表 –&amp;gt; 加载预训练词元分析器 –&amp;gt; 分词序列 –&amp;gt; 加载随即权重的BERT模型，设置掩码比例，进行训练，下面是代码训练过程：&lt;/p&gt;
&lt;p&gt;dataset获取与镜像设置：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#下载数据集：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pip install huggingface_hub&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;huggingface-cli download --repo-&lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt; dataset legacy-datasets/wikipedia  --local-&lt;span class=&#34;built_in&#34;&gt;dir&lt;/span&gt; wikipedia&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# mirror&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export HF_ENDPOINT=https://hf-mirror.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;environment(有部分可能不需要）:&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;channels:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - defaults&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dependencies:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - _libgcc_mutex=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;=main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - _openmp_mutex=&lt;span class=&#34;number&#34;&gt;5.1&lt;/span&gt;=1_gnu&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - bzip2=&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.8&lt;/span&gt;=h5eee18b_6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - ca-certificates=&lt;span class=&#34;number&#34;&gt;2025.2&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.25&lt;/span&gt;=h06a4308_0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - expat=&lt;span class=&#34;number&#34;&gt;2.7&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;=h6a678d5_0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - ld_impl_linux-&lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;=&lt;span class=&#34;number&#34;&gt;2.40&lt;/span&gt;=h12ee557_0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - libffi=&lt;span class=&#34;number&#34;&gt;3.4&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.4&lt;/span&gt;=h6a678d5_1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - libgcc-ng=&lt;span class=&#34;number&#34;&gt;11.2&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;=h1234567_1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - libgomp=&lt;span class=&#34;number&#34;&gt;11.2&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;=h1234567_1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - libstdcxx-ng=&lt;span class=&#34;number&#34;&gt;11.2&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;=h1234567_1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - libuuid=&lt;span class=&#34;number&#34;&gt;1.41&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.5&lt;/span&gt;=h5eee18b_0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - ncurses=&lt;span class=&#34;number&#34;&gt;6.4&lt;/span&gt;=h6a678d5_0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - openssl=&lt;span class=&#34;number&#34;&gt;3.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.16&lt;/span&gt;=h5eee18b_0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - pip=&lt;span class=&#34;number&#34;&gt;25.1&lt;/span&gt;=pyhc872135_2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - python=&lt;span class=&#34;number&#34;&gt;3.12&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.9&lt;/span&gt;=h5148396_0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - readline=&lt;span class=&#34;number&#34;&gt;8.2&lt;/span&gt;=h5eee18b_0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - setuptools=&lt;span class=&#34;number&#34;&gt;78.1&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;=py312h06a4308_0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - sqlite=&lt;span class=&#34;number&#34;&gt;3.45&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.3&lt;/span&gt;=h5eee18b_0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - tk=&lt;span class=&#34;number&#34;&gt;8.6&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.14&lt;/span&gt;=h39e8969_0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - wheel=&lt;span class=&#34;number&#34;&gt;0.45&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;=py312h06a4308_0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - xz=&lt;span class=&#34;number&#34;&gt;5.6&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.4&lt;/span&gt;=h5eee18b_1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - zlib=&lt;span class=&#34;number&#34;&gt;1.2&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.13&lt;/span&gt;=h5eee18b_1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - pip:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - accelerate==&lt;span class=&#34;number&#34;&gt;0.26&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - aiohappyeyeballs==&lt;span class=&#34;number&#34;&gt;2.6&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - aiohttp==&lt;span class=&#34;number&#34;&gt;3.11&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.18&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - aiosignal==&lt;span class=&#34;number&#34;&gt;1.3&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - attrs==&lt;span class=&#34;number&#34;&gt;25.3&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - certifi==&lt;span class=&#34;number&#34;&gt;2025.4&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.26&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - charset-normalizer==&lt;span class=&#34;number&#34;&gt;3.4&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - datasets==&lt;span class=&#34;number&#34;&gt;3.6&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - dill==&lt;span class=&#34;number&#34;&gt;0.3&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - filelock==&lt;span class=&#34;number&#34;&gt;3.18&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - frozenlist==&lt;span class=&#34;number&#34;&gt;1.6&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - fsspec==&lt;span class=&#34;number&#34;&gt;2025.3&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - huggingface-hub==&lt;span class=&#34;number&#34;&gt;0.31&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - idna==&lt;span class=&#34;number&#34;&gt;3.10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - jinja2==&lt;span class=&#34;number&#34;&gt;3.1&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - markupsafe==&lt;span class=&#34;number&#34;&gt;3.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - mpmath==&lt;span class=&#34;number&#34;&gt;1.3&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - multidict==&lt;span class=&#34;number&#34;&gt;6.4&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - multiprocess==&lt;span class=&#34;number&#34;&gt;0.70&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - mwparserfromhell==&lt;span class=&#34;number&#34;&gt;0.6&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - networkx==&lt;span class=&#34;number&#34;&gt;3.4&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - numpy==&lt;span class=&#34;number&#34;&gt;2.2&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - nvidia-cublas-cu12==&lt;span class=&#34;number&#34;&gt;12.6&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.4&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - nvidia-cuda-cupti-cu12==&lt;span class=&#34;number&#34;&gt;12.6&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - nvidia-cuda-nvrtc-cu12==&lt;span class=&#34;number&#34;&gt;12.6&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.77&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - nvidia-cuda-runtime-cu12==&lt;span class=&#34;number&#34;&gt;12.6&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.77&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - nvidia-cudnn-cu12==&lt;span class=&#34;number&#34;&gt;9.5&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.17&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - nvidia-cufft-cu12==&lt;span class=&#34;number&#34;&gt;11.3&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - nvidia-cufile-cu12==&lt;span class=&#34;number&#34;&gt;1.11&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - nvidia-curand-cu12==&lt;span class=&#34;number&#34;&gt;10.3&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.7&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.77&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - nvidia-cusolver-cu12==&lt;span class=&#34;number&#34;&gt;11.7&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - nvidia-cusparse-cu12==&lt;span class=&#34;number&#34;&gt;12.5&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.4&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - nvidia-cusparselt-cu12==&lt;span class=&#34;number&#34;&gt;0.6&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - nvidia-nccl-cu12==&lt;span class=&#34;number&#34;&gt;2.26&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - nvidia-nvjitlink-cu12==&lt;span class=&#34;number&#34;&gt;12.6&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.85&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - nvidia-nvtx-cu12==&lt;span class=&#34;number&#34;&gt;12.6&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.77&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - packaging==&lt;span class=&#34;number&#34;&gt;25.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - pandas==&lt;span class=&#34;number&#34;&gt;2.2&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - propcache==&lt;span class=&#34;number&#34;&gt;0.3&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - psutil==&lt;span class=&#34;number&#34;&gt;7.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - pyarrow==&lt;span class=&#34;number&#34;&gt;20.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - python-dateutil==&lt;span class=&#34;number&#34;&gt;2.9&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;.post0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - pytz==&lt;span class=&#34;number&#34;&gt;2025.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - pyyaml==&lt;span class=&#34;number&#34;&gt;6.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - regex==&lt;span class=&#34;number&#34;&gt;2024.11&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - requests==&lt;span class=&#34;number&#34;&gt;2.32&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - safetensors==&lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - six==&lt;span class=&#34;number&#34;&gt;1.17&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - sympy==&lt;span class=&#34;number&#34;&gt;1.14&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - tokenizers==&lt;span class=&#34;number&#34;&gt;0.21&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - torch==&lt;span class=&#34;number&#34;&gt;2.7&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - tqdm==&lt;span class=&#34;number&#34;&gt;4.67&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - transformers==&lt;span class=&#34;number&#34;&gt;4.51&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - triton==&lt;span class=&#34;number&#34;&gt;3.3&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - typing-extensions==&lt;span class=&#34;number&#34;&gt;4.13&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - tzdata==&lt;span class=&#34;number&#34;&gt;2025.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - urllib3==&lt;span class=&#34;number&#34;&gt;2.4&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - xxhash==&lt;span class=&#34;number&#34;&gt;3.5&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - yarl==&lt;span class=&#34;number&#34;&gt;1.20&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; transformers &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; BertTokenizerFast,BertConfig,BertForMaskedLM,DataCollatorForLanguageModeling,TrainingArguments,Trainer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; datasets &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; load_dataset&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; tokenizers &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; BertWordPieceTokenizer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; json&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; itertools &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; chain&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;os.environ[&lt;span class=&#34;string&#34;&gt;&amp;#x27;CUDA_VISIBLE_DEVICES&amp;#x27;&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# 这个得加，多gpu跑的话会有问题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 加载本地数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;wiki = load_dataset(&lt;span class=&#34;string&#34;&gt;&amp;quot;/data/hcfeng/learnLLM/wikipedia&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;20220301.en&amp;quot;&lt;/span&gt;, split=&lt;span class=&#34;string&#34;&gt;&amp;quot;train&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#仅保留text列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;wiki = wiki.remove_columns([col &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; col &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; wiki.column_names &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; col!=&lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#切割数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dataset = wiki&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;d = dataset.train_test_split(train_size=&lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;,test_size=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;dataset_to_text&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;dataset,filename&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    outpur_path=&lt;span class=&#34;string&#34;&gt;&amp;quot;/data/hcfeng/learnLLM/TrainBert/small_dataset/&amp;quot;&lt;/span&gt;+filename &lt;span class=&#34;comment&#34;&gt;#拼接地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(outpur_path,&lt;span class=&#34;string&#34;&gt;&amp;#x27;w&amp;#x27;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; t &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; dataset[&lt;span class=&#34;string&#34;&gt;&amp;#x27;text&amp;#x27;&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(t,file=f)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dataset_to_text(d[&lt;span class=&#34;string&#34;&gt;&amp;#x27;train&amp;#x27;&lt;/span&gt;],&lt;span class=&#34;string&#34;&gt;&amp;#x27;train.txt&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dataset_to_text(d[&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;],&lt;span class=&#34;string&#34;&gt;&amp;#x27;test.txt&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;special_tokens = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;[PAD]&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;[UNK]&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;[CLS]&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;[SEP]&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;[MASK]&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;lt;S&amp;gt;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;lt;T&amp;gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 如果根据训练和测试两个集合训练词元分析器，则需要修改files&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# files = [&amp;quot;train.txt&amp;quot;, &amp;quot;test.txt&amp;quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 仅根据训练集合训练词元分析器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;files = [&lt;span class=&#34;string&#34;&gt;&amp;quot;/data/hcfeng/learnLLM/TrainBert/small_dataset/train.txt&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# BERT中采用的默认词表大小为30522，可以随意修改&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;vocab_size = &lt;span class=&#34;number&#34;&gt;30522&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 最大序列长度，该值越小，训练速度越快&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;max_length = &lt;span class=&#34;number&#34;&gt;512&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 是否将长样本截断&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;truncate_longer_samples = &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 初始化WordPiece词元分析器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tokenizer = BertWordPieceTokenizer()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 训练词元分析器，设定的 vocab_size 是最大允许值，但实际生成的词表大小可能更小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tokenizer.train(files=files, vocab_size=vocab_size, special_tokens=special_tokens) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 允许截断达到最大512个词元&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tokenizer.enable_truncation(max_length=max_length)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model_path = &lt;span class=&#34;string&#34;&gt;&amp;quot;/data/hcfeng/learnLLM/TrainBert/small_pretrained-bert&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 如果文件夹不存在，则先创建文件夹&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; os.path.isdir(model_path):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    os.mkdir(model_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 保存词元分析器模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tokenizer.save_model(model_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 将一些词元分析器中的配置保存到配置文件，包括特殊词元、转换为小写、最大序列长度等&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(os.path.join(model_path, &lt;span class=&#34;string&#34;&gt;&amp;quot;config.json&amp;quot;&lt;/span&gt;), &lt;span class=&#34;string&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tokenizer_cfg = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;do_lower_case&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;unk_token&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;[UNK]&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;sep_token&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;[SEP]&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;pad_token&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;[PAD]&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;cls_token&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;[CLS]&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;mask_token&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;[MASK]&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;model_max_length&amp;quot;&lt;/span&gt;: max_length,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;max_len&amp;quot;&lt;/span&gt;: max_length,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    json.dump(tokenizer_cfg, f)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# tokenizer处理序列会自动添加CLS和SEP，但是tokenizer.tokenize()只会进行基础分词，不会添加特殊分词&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tokenizer = BertTokenizerFast.from_pretrained(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/data/hcfeng/learnLLM/TrainBert/small_pretrained-bert&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;#x27;tokenier:&lt;span class=&#34;subst&#34;&gt;&amp;#123;tokenizer&amp;#125;&lt;/span&gt;&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;encode_with_truncation&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;examples&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot; 使用词元分析对句子进行处理并截断的映射函数（Mapping function）&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; tokenizer(examples[&lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;], truncation=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, padding=&lt;span class=&#34;string&#34;&gt;&amp;quot;max_length&amp;quot;&lt;/span&gt;,max_length=max_length, return_special_tokens_mask=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;encode_without_truncation&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;examples&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot; 使用词元分析对句子进行处理且不截断的映射函数（Mapping function）&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; tokenizer(examples[&lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;], return_special_tokens_mask=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 编码函数将依赖于truncate_longer_samples变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;encode = encode_with_truncation &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; truncate_longer_samples &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; encode_without_truncation&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 对训练数据集进行分词处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;train_dataset = d[&lt;span class=&#34;string&#34;&gt;&amp;quot;train&amp;quot;&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;map&lt;/span&gt;(encode, batched=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 对测试数据集进行分词处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;test_dataset = d[&lt;span class=&#34;string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;map&lt;/span&gt;(encode, batched=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; truncate_longer_samples:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 移除其他列，将input_ids和attention_mask设置为PyTorch张量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    train_dataset.set_format(&lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;torch&amp;quot;&lt;/span&gt;, columns=[&lt;span class=&#34;string&#34;&gt;&amp;quot;input_ids&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;attention_mask&amp;quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    test_dataset.set_format(&lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;torch&amp;quot;&lt;/span&gt;, columns=[&lt;span class=&#34;string&#34;&gt;&amp;quot;input_ids&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;attention_mask&amp;quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 移除其他列，将它们保留为Python列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    test_dataset.set_format(columns=[&lt;span class=&#34;string&#34;&gt;&amp;quot;input_ids&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;attention_mask&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;special_tokens_mask&amp;quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    train_dataset.set_format(columns=[&lt;span class=&#34;string&#34;&gt;&amp;quot;input_ids&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;attention_mask&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;special_tokens_mask&amp;quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 用于不截断的情况&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;group_texts&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;examples&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 拼接所有文本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    concatenated_examples = &amp;#123;k: &lt;span class=&#34;built_in&#34;&gt;list&lt;/span&gt;(chain(*examples[k])) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; k &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; examples.keys()&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    total_length = &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(concatenated_examples[&lt;span class=&#34;built_in&#34;&gt;list&lt;/span&gt;(examples.keys())[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 舍弃了剩余部分，如果模型支持填充而不是舍弃，则可以根据需要自定义这部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; total_length &amp;gt;= max_length:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        total_length = (total_length // max_length) * max_length&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 按照最大长度分割成块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    k: [t[i : i + max_length] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, total_length, max_length)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; k, t &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; concatenated_examples.items()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; truncate_longer_samples:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    train_dataset = train_dataset.&lt;span class=&#34;built_in&#34;&gt;map&lt;/span&gt;(group_texts, batched=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;,desc=&lt;span class=&#34;string&#34;&gt;f&amp;quot;Grouping texts in chunks of &lt;span class=&#34;subst&#34;&gt;&amp;#123;max_length&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    test_dataset = test_dataset.&lt;span class=&#34;built_in&#34;&gt;map&lt;/span&gt;(group_texts, batched=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;,desc=&lt;span class=&#34;string&#34;&gt;f&amp;quot;Grouping texts in chunks of &lt;span class=&#34;subst&#34;&gt;&amp;#123;max_length&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 将它们从列表转换为PyTorch张量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    train_dataset.set_format(&lt;span class=&#34;string&#34;&gt;&amp;quot;torch&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    test_dataset.set_format(&lt;span class=&#34;string&#34;&gt;&amp;quot;torch&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 开始训练&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;tokenizer.vocab_size:&lt;span class=&#34;subst&#34;&gt;&amp;#123;tokenizer.vocab_size&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#这里vocab_size一般设为tokenizer.vocab_size，其实只要大于这个数字都是可以的，只是会占用了显存空间（training)，但是不能设小，会出现索引越界的问题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model_config = BertConfig(vocab_size=tokenizer.vocab_size, max_position_embeddings=max_length) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = BertForMaskedLM(config=model_config)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data_collator = DataCollatorForLanguageModeling(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tokenizer=tokenizer, mlm=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, mlm_probability=&lt;span class=&#34;number&#34;&gt;0.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;training_args = TrainingArguments(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    output_dir=model_path, &lt;span class=&#34;comment&#34;&gt;# 输出目录，用于保存模型检查点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    eval_strategy=&lt;span class=&#34;string&#34;&gt;&amp;quot;steps&amp;quot;&lt;/span&gt;, &lt;span class=&#34;comment&#34;&gt;# 每隔`logging_steps`步进行一次评估&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    overwrite_output_dir=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    num_train_epochs=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;comment&#34;&gt;# 训练时的轮数，可以根据需要进行调整&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    per_device_train_batch_size=&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;comment&#34;&gt;# 训练批量大小，可以根据GPU内存容量将其设置得尽可能大&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    gradient_accumulation_steps=&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;comment&#34;&gt;# 在更新权重之前累积梯度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    per_device_eval_batch_size=&lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;, &lt;span class=&#34;comment&#34;&gt;# 评估批量大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    logging_steps=&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;, &lt;span class=&#34;comment&#34;&gt;# 每隔1000步进行一次评估，记录并保存模型检查点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    save_steps=&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# load_best_model_at_end=True, # 是否在训练结束时加载最佳模型（根据损失）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# save_total_limit=3, # 如果磁盘空间有限，则可以限制只保存3个模型权重&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;trainer = Trainer(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model=model,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    args=training_args,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data_collator=data_collator,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    train_dataset=train_dataset,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    eval_dataset=test_dataset,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#检查点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;input_ids dtype:&amp;quot;&lt;/span&gt;, train_dataset[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;string&#34;&gt;&amp;quot;input_ids&amp;quot;&lt;/span&gt;].dtype)  &lt;span class=&#34;comment&#34;&gt;# 应该是 torch.int64 (long)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;attention_mask dtype:&amp;quot;&lt;/span&gt;, train_dataset[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;string&#34;&gt;&amp;quot;attention_mask&amp;quot;&lt;/span&gt;].dtype)  &lt;span class=&#34;comment&#34;&gt;# 应该是 torch.int64 (long)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;batch = data_collator([train_dataset[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], train_dataset[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;input_ids shape:&amp;quot;&lt;/span&gt;, batch[&lt;span class=&#34;string&#34;&gt;&amp;quot;input_ids&amp;quot;&lt;/span&gt;].shape)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;#x27;batch[&amp;quot;input_ids&amp;quot;]:&lt;span class=&#34;subst&#34;&gt;&amp;#123;batch[&lt;span class=&#34;string&#34;&gt;&amp;quot;input_ids&amp;quot;&lt;/span&gt;]&amp;#125;&lt;/span&gt;&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;labels shape:&amp;quot;&lt;/span&gt;, batch[&lt;span class=&#34;string&#34;&gt;&amp;quot;labels&amp;quot;&lt;/span&gt;].shape)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# print(&amp;quot;labels min/max:&amp;quot;, torch.min(batch[&amp;quot;labels&amp;quot;]), torch.max(batch[&amp;quot;labels&amp;quot;]))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;input_ids min/max:&amp;quot;&lt;/span&gt;, torch.&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(batch[&lt;span class=&#34;string&#34;&gt;&amp;quot;input_ids&amp;quot;&lt;/span&gt;]), torch.&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(batch[&lt;span class=&#34;string&#34;&gt;&amp;quot;input_ids&amp;quot;&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(torch.__version__)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(torch.version.cuda)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(torch.cuda.is_available()) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 训练模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;trainer.train()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

</content>
        <category term="Bert" />
        <category term="GPT" />
        <updated>2025-05-16T16:37:02.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2025/05/13/Transformer/</id>
        <title>Transformer</title>
        <link rel="alternate" href="http://example.com/2025/05/13/Transformer/"/>
        <content type="html">&lt;h2 id=&#34;Transformer四层结构&#34;&gt;&lt;a href=&#34;#Transformer四层结构&#34; class=&#34;headerlink&#34; title=&#34;Transformer四层结构&#34;&gt;&lt;/a&gt;Transformer四层结构&lt;/h2&gt;&lt;p&gt;Transformer结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image1.png&#34; alt=&#34;image1&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;嵌入表示层&lt;/p&gt;
&lt;p&gt;Transformer的自注意力机制是并行处理所有书如此，无法区分语序，所以需要进行位置编码，做法：先为每个单词生成向量嵌入表示，对每个单词所在位置对应一个位置向量，将两个向量进行相加。位置向量的生成公式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image2.png&#34; alt=&#34;image1&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据位置的就选择正弦余弦函数进行计算，这个计算是对每个单词里面的向量的每一维都进行计算，代码如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#transformer位置编码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;PositionalEncoder&lt;/span&gt;(nn.Module):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, d_model,max_seq_len = &lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;().__init__()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.d_model = d_model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;# 根据pos和i创建一个常量PE矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pe = torch.zeros(max_seq_len, d_model)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; pos &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(max_seq_len):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, d_model, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                pe[pos, i] = math.sin(pos / (&lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt; ** (i/d_model)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                pe[pos, i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = math.cos(pos / (&lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt; ** (i/d_model)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pe = pe.unsqueeze(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;#形状 (1, seq_len, d_model)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.register_buffer(&lt;span class=&#34;string&#34;&gt;&amp;#x27;pe&amp;#x27;&lt;/span&gt;, pe)   &lt;span class=&#34;comment&#34;&gt;#将 pe 保存为模型的一部分（不参与梯度更新，但会随模型保存/加载）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self,x&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;#x:(batch_size, seq_len, d_model)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        seq_len = x.size(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x = x + &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.pe[:,:seq_len].cuda()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用正余弦的原因是，函数的范围是[-1，1]与词向量相加不会太偏离原始语义，同时第pos+k个位置的编码是第pos个位置编码的线性组合（根据三角函数和角公式决定），这就蕴含了单词之间的距离信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image3.png&#34; alt=&#34;image2&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自注意力层&lt;/p&gt;
&lt;p&gt;自注意力机制，即自己作为QKV进行计算，但是解码器有两个注意力模块，一个是掩码多头，一个是交叉多头注意力，但是原理其实和下面代码差不多，直接用代码展示比较能说明：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#transformer多头自注意力机制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MultiHeadAttention&lt;/span&gt;(nn.Module):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, heads, d_model,dropout = &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;().__init__()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.d_model = d_model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.h = heads&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.d_k = d_model // heads&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.q_linear = nn.Linear(d_model,d_model)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.k_linear = nn.Linear(d_model,d_model)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.v_linear = nn.Linear(d_model,d_model)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.dropout = nn.Dropout(dropout)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.out = nn.Linear(d_model,d_model)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;attention&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;q, k, v, d_k, mask = &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, dropout = &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt; &lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 转置k相乘 ​​除以 math.sqrt(d_k)​​ 的操作是缩放点积注意力，防止点积数值过大​&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scores = torch.matmul(q,k.transpose(-&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)) / math.sqrt(d_k)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; mask &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            mask = mask.unsqueeze(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            scores = scores.masked_fill(mask == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1e9&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;#掩盖那些为了补全长度而增加的单元，使其通过Softmax计算后为0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scores = F.sofmax(scores,dim=-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; dropout &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            scores = dropout(scores)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        output = torch.matmul(scores,v)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; output&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, q, k, v, mask = &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        batch_size = q.size(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 利用线性计算划分成h个头&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        q = &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.q_linear(q).view(batch_size,-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.h,&lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.d_k)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        k = &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.k_linear(k).view(batch_size,-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.h,&lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.d_k)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        v = &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.v_linear(v).view(batch_size,-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.h,&lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.d_k)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;#转置头和seq_len位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        k = k.transpose(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        q = q.transpose(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        v = v.transpose(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scores = &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.attention(q, k, v, &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.d_k, mask, &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.dropout)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 拼接多头输出并线性变换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        concat = scores.transpose(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;).contiguous().view(batch_size, -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.d_model)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        output = &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.out(concat) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; output&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前馈层&lt;/p&gt;
&lt;p&gt;接收注意力层的输出，通过带有ReLU的2层全连接网络，第一层会映射到高纬度，因为隐藏层维度的增大有利于提高质量（实验证明）：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#前馈层&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FeedForward&lt;/span&gt;(nn.Module):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, d_model, d_ff = &lt;span class=&#34;number&#34;&gt;2038&lt;/span&gt;, dropout = &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;().__init__()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.linear1 = nn.Linear(d_model, d_ff)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.dropout = nn.Dropout(dropout)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.linear2 = nn.Linear(d_ff,d_model)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, x&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x = &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.dropout(F.relu(&lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.linear1(x)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x = &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.linear2(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;残差连接和归一化&lt;/p&gt;
&lt;p&gt;​    由Transformer结构组成的网络结构通常都非常庞大。编码器和解码器均由很多层基本的Transformer 块组成，每一层中都包含复杂的非线性映射，这就导致模型的训练比较困难。因此，研究人员在 Transformer 块中进一步引入了残差连接与层归一化技术，以进一步提升训练的稳定性。具体来说，残差连接主要是指使用一条直连通道直接将对应子层的输入连接到输出，避免在优化过程中因网络过深而产生潜在的梯度消失问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;解码器与编码器&#34;&gt;&lt;a href=&#34;#解码器与编码器&#34; class=&#34;headerlink&#34; title=&#34;解码器与编码器&#34;&gt;&lt;/a&gt;解码器与编码器&lt;/h2&gt;&lt;p&gt;​	编码器端较容易实现。相比于编码器端，解码器端更复杂。具体来说，解码器的每个 Transformer 块的第一个自注意力子层额外增加了注意力掩码，对应图中的掩码多头注意力部分。这主要是因为在翻译的过程中，编码器端主要用于编码源语言序列的信息，而这个序列是完全已知的，因而编码器仅需要考虑如何融合上下文语义信息。解码器端则负责生成目标语言序列，这一生成过程是自回归的，即对于每一个单词的生成过程，仅有当前单词之前的目标语言序列是可以被观测的，因此这一额外增加的掩码是用来掩盖后续的文本信息的，以防模型在训练阶段直接看到后续的文本序列，进而无法得到有效的训练。此外，解码器端额外增加了一个多头交叉注意力模块，使用交叉注意力方法，同时接收来自编码器端的输出和当前 Transformer 块的前一个掩码注意力层的输出。查询是通过解码器前一层的输出进行投影的，而键和值是使用编码器的输出进行投影的。&lt;/p&gt;
&lt;p&gt;​	解码器端以自回归的方式生成目标语言文本，即在每个时间步 &lt;em&gt;t&lt;/em&gt;，根据编码器端输出的源语言文本表示，以及前t &lt;em&gt;−&lt;/em&gt; 1 个时刻生成的目标语言文本，生成当前时刻的目标语言单词（以我的理解来说，训练阶段是没有显示时间步概念的，通过&lt;strong&gt;一次性输入完整序列 + 掩码矩阵&lt;/strong&gt;，在单次前向传播中并行计算出所有位置的输出，同时利用掩码强制模型行为与自回归一致，而推理时必须显式按时间步生成，因为未来词未知（无法并行））。&lt;/p&gt;
&lt;h2 id=&#34;以推理生成中文翻译-我爱你-为例：&#34;&gt;&lt;a href=&#34;#以推理生成中文翻译-我爱你-为例：&#34; class=&#34;headerlink&#34; title=&#34;以推理生成中文翻译 &amp;quot;我爱你&amp;quot; 为例：&#34;&gt;&lt;/a&gt;以推理生成中文翻译 &lt;code&gt;&amp;quot;我爱你&amp;quot;&lt;/code&gt; 为例：&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;时间步&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;图1中对应的模块流程&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;具体操作&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;t=1&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;词元嵌入 → 位置编码 → 掩码多头注意力 → 编码器-解码器注意力 → 前馈网络 → Softmax&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;输入 &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt;，输出 &lt;code&gt;&amp;quot;我&amp;quot;&lt;/code&gt; 的概率分布。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;t=2&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;词元嵌入 (&lt;code&gt;&amp;lt;start&amp;gt; 我&lt;/code&gt;) → 位置编码 → 掩码多头注意力 → … → Softmax&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;输入 &lt;code&gt;&amp;lt;start&amp;gt; 我&lt;/code&gt;，输出 &lt;code&gt;&amp;quot;爱&amp;quot;&lt;/code&gt; 的概率分布。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;t=3&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;词元嵌入 (&lt;code&gt;&amp;lt;start&amp;gt; 我爱&lt;/code&gt;) → 位置编码 → … → Softmax&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;输入 &lt;code&gt;&amp;lt;start&amp;gt; 我爱&lt;/code&gt;，输出 &lt;code&gt;&amp;quot;你&amp;quot;&lt;/code&gt; 的概率分布。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;t=4&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;词元嵌入 (&lt;code&gt;&amp;lt;start&amp;gt; 我爱你&lt;/code&gt;) → … → Softmax&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;输入 &lt;code&gt;&amp;lt;start&amp;gt; 我爱你&lt;/code&gt;，输出 &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; 的概率分布，终止生成。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;可参考文章：&lt;a href=&#34;https://blog.csdn.net/m0_64148253/article/details/140422497&#34;&gt;https://blog.csdn.net/m0_64148253/article/details/140422497&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="LLM" />
        <category term="transformer" />
        <updated>2025-05-13T07:07:29.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2025/05/13/DatalinkX/</id>
        <title>DatalinkX</title>
        <link rel="alternate" href="http://example.com/2025/05/13/DatalinkX/"/>
        <content type="html">&lt;p&gt;DatalinkX是一个基于Flink的异构数据源流转服务，用来作为数据源之间的数据同步工具，通过抽象异构数据源驱动加借助FlinkX开源组件屏蔽数据源间不同的通信协议，通过页面化配置数据同步任务的方式简化数据库同步流程，并通过Xxl-Job组件实现定时调度。&lt;/p&gt;
&lt;h2 id=&#34;模块设置&#34;&gt;&lt;a href=&#34;#模块设置&#34; class=&#34;headerlink&#34; title=&#34;模块设置&#34;&gt;&lt;/a&gt;模块设置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;业务数据管理模块:负责管理数据源和同步任务的增删改查。包含数据源管理、任务管理等。&lt;/li&gt;
&lt;li&gt;同步任务管理模块:借助xx1-job实现任务调度管理，确保异构数据源的定时同步和实时更新需求，同时支持批量任务管理，提高任务调度的效率。&lt;/li&gt;
&lt;li&gt;RPC通信模块:利用Retrofit2实现分布式服务间的RPC调用，提供高效的数据请求和响应机制支持各模块间的数据传输和服务调用。&lt;/li&gt;
&lt;li&gt;数据源驱动模块:负责异构数据源的驱动配置，兼容多类型数据源的连接、读取和写入操作，为业务数据管理和同步提供支持。&lt;/li&gt;
&lt;li&gt;消息通道模块:采用Redis Stream实现分布式消息队列，保障各模块间的消息通信效率和数据传5.&lt;br&gt;输的可靠性。&lt;/li&gt;
&lt;li&gt;实时刷新前端模块:通过SSE技术实现数据的实时推送，配合Ant Design在前端即时刷新数据提供用户友好的动态体验。&lt;/li&gt;
&lt;li&gt;公共模块:包含系统基础功能、工具方法和通用接口，实现各模块间的共享，提升系统的可维护性和复用性。&lt;/li&gt;
&lt;li&gt;FlinkX模块:负责人规模数据的实时同步、数据清洗和格式转换，支持流式和批量数据的整合处理，为系统提供数据支持。&lt;br&gt;数据清洗与转换模块:基于Flinkx的清洗能力，对不同数据源的数据进行标准化、过滤和转换以确保进入系统的数据一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重要模块&#34;&gt;&lt;a href=&#34;#重要模块&#34; class=&#34;headerlink&#34; title=&#34;重要模块&#34;&gt;&lt;/a&gt;重要模块&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&#34;消息队列-SSE实现实时推送&#34;&gt;&lt;a href=&#34;#消息队列-SSE实现实时推送&#34; class=&#34;headerlink&#34; title=&#34;消息队列+SSE实现实时推送&#34;&gt;&lt;/a&gt;消息队列+SSE实现实时推送&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;首先基于自定义注解@messageHub标注消费者方法，在程序运行初始化完Bean之后，实现对每个Bean进行循环检查，寻找带该注解的方法，找到后将其注册成消费者。&lt;/li&gt;
&lt;li&gt;基于Redis的stream数据结构实现轻量级的消息队列，出于两点原因选择该方式，首先是本项目只需要使用消息队列实现任务状态和任务进度的推送，不需要严格意义上的高可用、低延迟，其次是RabbitMQ或者是Kafka服务的复杂性，一个健壮的项目并不是引入越多的中间件会越好，而是Bug越少越好，或者说出Bug概率越低越好。而Redis的stream借助了很多Kafka的设计思路，而且更轻量级。&lt;/li&gt;
&lt;li&gt;消费者的注册，其实是非常简单的一件事，只需要带有@messageHub的，就创建一个线程监听注解中配置的消息地址，监听到消息后回调给该消费者，并返回ACK标记消息已被消费，如果在消费过程中出现故障，则会继续在pending队列中消费，一般会重试4次，如果消费不了，只能是放弃，因为这并不是一个十分重要的操作，丢失部分进度消息是用户能够接收的。&lt;/li&gt;
&lt;li&gt;基于SSE实例实现消息实时推送，SSE是使用流信息向浏览器进行信息推送，也就是信息不是一次性的，而是连续不断的，类似于视频的播放。SSE是一个单向通信，只能服务器向浏览器发送，这里不选择websocket的原因和2一样，基于业务层面去考虑。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;抽象数据源Driver设计&#34;&gt;&lt;a href=&#34;#抽象数据源Driver设计&#34; class=&#34;headerlink&#34; title=&#34;抽象数据源Driver设计&#34;&gt;&lt;/a&gt;抽象数据源Driver设计&lt;/h3&gt;&lt;p&gt;​       该项目是支持异构数据源同步的，所以会有很多种数据源，进行每种数据源连接是确实可以使用if else去定义，但是这并不好维护，而且可拓展性十分差，想象一下每次新增一个数据源就写多一个if else，代码的可读性也会很差，所以这里会基于模板模式和工厂模式对数据源驱动的获取进行抽象。&lt;/p&gt;
&lt;p&gt;​    我们把数据源实例抽象为几个步骤，读写分离，然后分别定义为接口，将支持JDBC的数据源做一种实现，不支持JDBC的数据源也做一种实现。每种实现又有一个基础类去实现基础功能。&lt;/p&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image1.png&#34; alt=&#34;image1&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;DsDriverFactory遵循工厂设计原则，每个数据源必要信息通过压缩算法返回一个唯一字符串connectld，DsDriverFactory向外暴露getDsReader、getDsWriter方法，通过解析connectld得到数据源type，根据数据源type获取对应Driver.class并通过反射生成对应的驱动对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要新增数据源，比如新增一个Mysql的数据源，那么只需要继承JDBC这个类，JDBC这个类已经实现了部分基本的功能，并制定了相应的执行流程，Mysql继承之后，只需要把获取数据源JdbcUrl这种每个数据源都不同的抽象方法给实现了就行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;总体流程就是，用户提交了注册新数据源的信息之后，注册信息会存入数据库中，等到创建流转任务时，会获取数据源下的数据表，这时就调用DsDriverFactory获取数据源实例，并调用实例中的方法获取对应的数据&amp;#x2F;写入数据。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;PACKAGE_PREFIX&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;com.datalinkx.driver.dsdriver.&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; String &lt;span class=&#34;title function_&#34;&gt;getDriverClass&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String driverName)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; PACKAGE_PREFIX + driverName.toLowerCase() + &lt;span class=&#34;string&#34;&gt;&amp;quot;driver&amp;quot;&lt;/span&gt; + &lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; + ConnectIdUtils.toPascalCase(driverName) + &lt;span class=&#34;string&#34;&gt;&amp;quot;Driver&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//getDriver 方法依赖于 ConnectIdUtils 和 getDriverClass 方法来确定应该加载和实例化哪个驱动类。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; IDsDriver &lt;span class=&#34;title function_&#34;&gt;getDriver&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String connectId)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;dsType&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; ConnectIdUtils.getDsType(connectId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//拼接地址，也就是包的地址，来获取对应的类名，并返回给DsServiceImpl类，让他知道用的是哪个实现类，这就是用来替代无数个if else的关键地方&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;driverClassName&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; getDriverClass(dsType);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Class&amp;lt;?&amp;gt; driverClass = Class.forName(driverClassName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Constructor&amp;lt;?&amp;gt; constructor = driverClass.getDeclaredConstructor(String.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (IDsDriver) constructor.newInstance(connectId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; IStreamDriver &lt;span class=&#34;title function_&#34;&gt;getStreamDriver&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String connectId)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;dsType&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; ConnectIdUtils.getDsType(connectId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;driverClassName&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; getDriverClass(dsType);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Class&amp;lt;?&amp;gt; driverClass = Class.forName(driverClassName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Constructor&amp;lt;?&amp;gt; constructor = driverClass.getDeclaredConstructor(String.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (IStreamDriver) constructor.newInstance(connectId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; IDsReader &lt;span class=&#34;title function_&#34;&gt;getDsReader&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String connectId)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;         * getDriver(connectId) 返回的是一个 IDsDriver 类型的对象，然后将其强制转换为 IDsReader 类型。这种转换能够成功执行的前提是：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;         * IDsReader 接口继承自 IDsDriver 接口：如果 IDsReader 接口是 IDsDriver 接口的子接口，那么所有的 IDsReader 实现也必然是 IDsDriver 的实现。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;         * 这种情况下，转换是合法的，因为 IDsReader 是 IDsDriver 的子类型。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;         * 实现类的兼容性：调用 getDriver(connectId) 方法返回的具体实现类必须同时实现了 IDsDriver 和 IDsReader 接口。这是类型转换能够成功的关键。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;         */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (IDsReader) getDriver(connectId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (InstantiationException | IllegalAccessException | InvocationTargetException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;driver load error&amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (NoSuchMethodException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;driver load error&amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Exception&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;can not initialize driver&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; IDsWriter &lt;span class=&#34;title function_&#34;&gt;getDsWriter&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String connectId)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (IDsWriter) getDriver(connectId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (InstantiationException | IllegalAccessException | InvocationTargetException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;driver load error&amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (NoSuchMethodException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;driver load error&amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Exception&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;can not initialize driver&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;XXL-Job平台&#34;&gt;&lt;a href=&#34;#XXL-Job平台&#34; class=&#34;headerlink&#34; title=&#34;XXL-Job平台&#34;&gt;&lt;/a&gt;XXL-Job平台&lt;/h3&gt;&lt;p&gt;​    xxl-job是一个分布式任务调度平台，核心思想是将调度任务抽象成为调度器和执行器，平台本身不承担业务逻辑，只负责发起调度请求后，由执行器接收调度请求并执行任务，这里的任务被抽象为分散的JobHandler。JobHandler分散到各个业务代码中，依netty保持与调度器的交互，通过这种方式即可实现调度与任务相互解耦，从而提高系统整体的稳定性和拓展性。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image2.png&#34; alt=&#34;image2&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;调度器只需要借助maven打包xxl-job的admin即可，然后java -jar把jar包运行起来即可，或者是用docker直接部署，而执行器则放在项目中的Job模块下，使用@XxlJob(“XXX”)在方法上定义执行器即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为了解决xxl-job登录的问题，这里会使用一个拦截器，拦截器逻辑非常朴实无华，在发请求之前，判断cookieValue是否存在，如果不存在就通过datalinkx-client的能力发起一次登录请求。登陆后保存cookie加到原请求中。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Response &lt;span class=&#34;title function_&#34;&gt;intercept&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Chain chain)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;Request&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; chain.request();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		Response response;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (StringUtils.isEmpty(cookieValue)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				retrofit2.&lt;span class=&#34;type&#34;&gt;Response&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;loginResp&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; xxlLoginClient.login(username, passwd, &lt;span class=&#34;string&#34;&gt;&amp;quot;on&amp;quot;&lt;/span&gt;).execute();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				cookieValue = loginResp.headers().get(SET_COOKIE_HEADER);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (StringUtils.isNotEmpty(cookieValue)) &amp;#123;&lt;span class=&#34;comment&#34;&gt;//检查是否成功获取了 Cookie 值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;comment&#34;&gt;//如果获取了 Cookie，则创建一个新的请求，将 Cookie 添加到请求头中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;type&#34;&gt;Request&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;newRequest&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; chain.request().newBuilder()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						.addHeader(HEADER_COOKIE, cookieValue)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						.build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;comment&#34;&gt;//使用新的请求继续执行链式调用，获取响应&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;comment&#34;&gt;//当前拦截器已经完成了对请求的处理，将请求传递给拦截器链中的下一个拦截器继续处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;comment&#34;&gt;// 最后一个拦截器处理请求后，不再调用 proceed，而是直接将请求发送到服务器。服务器的响应返回，按相反顺序通过拦截器链。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				response = chain.proceed(newRequest);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;xxl-job login error&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				response = chain.proceed(chain.request());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; e;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (response.code() == &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;type&#34;&gt;ResponseBody&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;responseBody&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; response.body();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;type&#34;&gt;MediaType&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;contentType&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; responseBody != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; ? responseBody.contentType() : &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (contentType != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; contentType.subtype().equals(&lt;span class=&#34;string&#34;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;bodyString&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; getBody(response);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				bodyString = bodyString.replaceFirst(&lt;span class=&#34;string&#34;&gt;&amp;quot;\&amp;quot;result\&amp;quot;:\\s*\&amp;quot;\\s*\&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;\&amp;quot;result\&amp;quot;: null&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;type&#34;&gt;ResponseBody&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; ResponseBody.create(contentType, bodyString);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				response = response.newBuilder().body(body).build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; response;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;流转任务的生命钩子函数设计&lt;/p&gt;
&lt;p&gt;​    通常的模板方法模式中会设计一个abstract的抽象方法，交给它的子类实现，这个方法称为模板方法。而钩子方法，是对于抽象方法或者接口中定义的方法的一个空实现，也是模板方法模式的一种实现方式。设计钩子方法的主要目的是干预执行流程，使得控制行为流程更加灵活，更符合实际业务的需求。在该项目流转任务的生命周期都是基于钩子方法+模板实现的，任务由xxl-job调度中心通过netty回调到DataTransHandler执行器中，执行器中注入任务触发类DataTransferAction，由doAction开始一次任务的执行，而FlinkAction是继承的AbstractDataTransferAction实现各种模板和钩子方法:&lt;/p&gt;
&lt;p&gt;​    六个钩子方法：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(D info)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(D info, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; status, String errmsg)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;beforeExec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(U unit)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(U unit)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;checkResult&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(U unit)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;afterExec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(U unit, &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; success, String errorMsg)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; U &lt;span class=&#34;title function_&#34;&gt;convertExecUnit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(D info)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​    doAction串联生命周期：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doAction&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T actionInfo)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 获取job详情&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;detail&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; getJobDetail(actionInfo);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;StringBuffer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;StringBuffer&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 准备执行job&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        begin(detail);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 遍历执行启动flink任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 每个单元执行前的准备&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (isStop()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;logkill trigger&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;InterruptedException&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            beforeExec(unit)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 启动任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            execute(unit);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;user stop&amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; e;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Throwable e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;execute flink task error.&amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            unitCount.decrementAndGet();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            afterExec(unit, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;, e.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            error.append(e.getMessage()).append(&lt;span class=&#34;string&#34;&gt;&amp;quot;\r\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 整个Job结束后的处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        end(detail, error.length() == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ? JOB_STATUS_SUCCESS : JOB_STATUS_ERROR, error.length() == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ? &lt;span class=&#34;string&#34;&gt;&amp;quot;success&amp;quot;&lt;/span&gt; : error.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;Stop task by user.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        JobUtils.cntx().setCanceled(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        end(detail, JOB_STATUS_STOP, &lt;span class=&#34;string&#34;&gt;&amp;quot;cancel the job&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; e;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Throwable e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;sync failed&amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        end(detail, JOB_STATUS_ERROR, e.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​    这个方法可谓是整个datalinkx的灵魂，核心中的核心，最核心的代码，我们通过这个方法将一个流转任务的生命周期串联起来。&lt;br&gt;这样真正的实现类DataTransferAction.java只需要继承AbstractDataTransferAction实现各个具体的生命周期方法即可，Xx1-Job回调来的方法直接调用FlinkAction继承的doAction方法即可将任务串联执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="datalinkx" />
        <updated>2025-05-12T16:35:28.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2025/05/12/LLM-concept/</id>
        <title>LLM-concept</title>
        <link rel="alternate" href="http://example.com/2025/05/12/LLM-concept/"/>
        <content type="html">&lt;h1 id=&#34;大模型基本概念&#34;&gt;&lt;a href=&#34;#大模型基本概念&#34; class=&#34;headerlink&#34; title=&#34;大模型基本概念&#34;&gt;&lt;/a&gt;大模型基本概念&lt;/h1&gt;&lt;h2 id=&#34;目标&#34;&gt;&lt;a href=&#34;#目标&#34; class=&#34;headerlink&#34; title=&#34;目标&#34;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;语言模型就是对自然语言的概率分布进行建模，即P(w1 w2 w3 … wn)，计算这些词构成的这句话成为合法的一句话的概率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算下一个词的概率 P(wn | w1 w2 w3… wn-1) &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;发展历程&#34;&gt;&lt;a href=&#34;#发展历程&#34; class=&#34;headerlink&#34; title=&#34;发展历程&#34;&gt;&lt;/a&gt;发展历程&lt;/h2&gt;&lt;p&gt;从n-gram:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;到neural language model: 每个词都映射成一个低维向量&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image3.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;再到后面的transformer出现，transformer的出现，NLP进入了预训练微调阶段，也就是只需把预训练好的模型用特定任务的训练集去微调（fine-tune），即可对下游任务进行操作，这种模型是PLM。&lt;/p&gt;
&lt;p&gt;随着OpenAI发布的1750亿个参数（GPT-3），开启LLM时代&lt;/p&gt;
&lt;h2 id=&#34;问题发现&#34;&gt;&lt;a href=&#34;#问题发现&#34; class=&#34;headerlink&#34; title=&#34;问题发现&#34;&gt;&lt;/a&gt;问题发现&lt;/h2&gt;&lt;p&gt; • 大模型（如GPT-3）参数量极大（1750亿+），传统“预训练+微调”范式成本过高（需为每个任务调整海量参数）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;解决方案：&lt;br&gt;• 开发新范式（ICL&amp;#x2F;Prompt），通过输入指令或示例直接引导模型，避免微调。&lt;/p&gt;
&lt;p&gt;• 但要让模型支持这种范式，必须在预训练阶段就赋予它相关能力（如理解指令、模仿示例）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模型构建的关键：&lt;br&gt;• 预训练阶段：用海量多样化数据（图书、网页、指令数据等）训练模型，使其隐式掌握ICL&amp;#x2F;Prompt所需的能力（如任务模式识别、指令遵循）。&lt;/p&gt;
&lt;p&gt;• 后续阶段（SFT+RLHF）：进一步优化模型对新范式的响应质量（如更精准的指令理解、更安全的输出）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;结论：&lt;br&gt;• 新范式（ICL&amp;#x2F;Prompt）依赖特定训练的模型：只有通过大规模预训练（及后续优化）的模型，才能直接通过上下文或指令适配任务，而传统小模型无法做到这一点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;LLM的构建流程&#34;&gt;&lt;a href=&#34;#LLM的构建流程&#34; class=&#34;headerlink&#34; title=&#34;LLM的构建流程&#34;&gt;&lt;/a&gt;LLM的构建流程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;预训练： 利用海量训练数据构建多样化内容，构建基础模型——&amp;gt;对长文本建模，使模型具有语言生成能力&lt;/li&gt;
&lt;li&gt;有监督微调SFT：用少量高质量数据集，通过有监督训练使模型具有问答、写作的能力，数据包括：用户输入提示词和对应理想输出结果&lt;/li&gt;
&lt;li&gt;奖励建模RM：训练一个能够判断文本质量的裁判，对同个提示词，比较SFT生成的多个输出的质量&lt;/li&gt;
&lt;li&gt;强化学习RLHF(human feedback)：基于RM，优化SFT模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SFT相当于学生学会答题，RM是评分老师，判断answer好坏，RLHF是学生根据老师评分改进答题策略&lt;/p&gt;
&lt;h2 id=&#34;补充&#34;&gt;&lt;a href=&#34;#补充&#34; class=&#34;headerlink&#34; title=&#34;补充&#34;&gt;&lt;/a&gt;补充&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;N-gram 模型详解&lt;/strong&gt;&lt;br&gt; N-gram 是一种基于统计的语言模型，用于预测或生成文本中的下一个词，其核心思想是：一个词的出现概率依赖于它前面的有限个词（n-1个词）。它是自然语言处理（NLP）中最基础且广泛使用的模型之一。&lt;/p&gt;
&lt;p&gt; N-gram的定义：&lt;/p&gt;
&lt;p&gt;• 指文本中连续的 &lt;em&gt;n&lt;/em&gt; 个词（或字符）组成的序列。&lt;/p&gt;
&lt;p&gt;• 例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;◦ Unigram (1-gram): &amp;quot;the&amp;quot;、&amp;quot;cat&amp;quot;、&amp;quot;sat&amp;quot;（单个词）。  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;◦ Bigram (2-gram): &amp;quot;the cat&amp;quot;、&amp;quot;cat sat&amp;quot;、&amp;quot;sat on&amp;quot;（两个连续词）。  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;◦ Trigram (3-gram): &amp;quot;the cat sat&amp;quot;、&amp;quot;cat sat on&amp;quot;（三个连续词）。  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;• 核心假设：&lt;/p&gt;
&lt;p&gt;• 马尔可夫假设：当前词的概率仅依赖于前 &lt;em&gt;n-1&lt;/em&gt; 个词，而非整个历史。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;◦ 例如，Bigram 模型认为 `P(sat | the cat)` ≈ `P(sat | cat)`，忽略更早的上下文。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;如何计算概率？&lt;/strong&gt;&lt;br&gt; N-gram 通过统计语料库中词序列的频率来估计概率：&lt;/p&gt;
&lt;p&gt;计算 &lt;code&gt;P(sat | the cat)&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;P(sat∣the cat)&amp;#x3D;Count(“the cat”)Count(“the cat sat”)&lt;/p&gt;
&lt;p&gt;若语料中 “the cat” 出现 100 次，”the cat sat” 出现 30 次，则 &lt;code&gt;P(sat | the cat) = 0.3&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;N-gram 的优缺点&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;优点&lt;/th&gt;
&lt;th&gt;缺点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;简单高效，计算速度快。&lt;/td&gt;
&lt;td&gt;无法捕捉长距离依赖（如 “The cat… sat” 相隔较远时）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;小规模数据即可训练。&lt;/td&gt;
&lt;td&gt;数据稀疏性（罕见 n-gram 概率不准确）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;曾广泛用于机器翻译、拼写检查等任务。&lt;/td&gt;
&lt;td&gt;无法理解语义（仅统计共现频率）。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
        <category term="LLM" />
        <category term="concept" />
        <updated>2025-05-12T07:54:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2025/05/11/resume/</id>
        <title>resume</title>
        <link rel="alternate" href="http://example.com/2025/05/11/resume/"/>
        <content type="html">&lt;h1 id=&#34;Resume&#34;&gt;&lt;a href=&#34;#Resume&#34; class=&#34;headerlink&#34; title=&#34;Resume&#34;&gt;&lt;/a&gt;Resume&lt;/h1&gt;&lt;h2 id=&#34;教育经历&#34;&gt;&lt;a href=&#34;#教育经历&#34; class=&#34;headerlink&#34; title=&#34;教育经历&#34;&gt;&lt;/a&gt;教育经历&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;深圳大学（硕士） 2024-2027 计算机技术 硕士一等奖学金&lt;/li&gt;
&lt;li&gt;广东财经大学（本科） 2020-2024 计算机科学与技术 学业奖学金  CET-6 蓝桥杯省赛二等奖&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实习经历&#34;&gt;&lt;a href=&#34;#实习经历&#34; class=&#34;headerlink&#34; title=&#34;实习经历&#34;&gt;&lt;/a&gt;实习经历&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;近期：深圳迅策科技股份有限公司 	    	后端研发实习生 技术支持中心—政府项目组&lt;/p&gt;
&lt;p&gt;后端研发实习生 技术支持中心—政府项目组&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作描述：负责智慧交通平台道路信息服务的后端研发&lt;/li&gt;
&lt;li&gt;参与问题定位开发：使用AOP并结合自定义注解获取全局请求与处理信息，增强API的可追踪性和调试效率，通过此配置团队成员可以快速定位问题和分析系统行为，提高开发效率&lt;/li&gt;
&lt;li&gt;数据表设计与查询优化：独立完成交通流量、违法信息、道路信息等5个模块的数据设计，包含数据表设计、字段抽象与设计，同时在百万级数据的交通流量表设计上建立索引，将平均回表次数从160w次优化为200次&lt;/li&gt;
&lt;li&gt;道路模块开发：负责相关需求开发，并基于内部CI&amp;#x2F;CD平台搭建自动化测试流水线，保证在提交测试前各接口单元测试覆盖率达到70%以上，核心链路全覆盖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他：望海康信、CVTE&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;项目经历&#34;&gt;&lt;a href=&#34;#项目经历&#34; class=&#34;headerlink&#34; title=&#34;项目经历&#34;&gt;&lt;/a&gt;项目经历&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;生物大语言模型集成平台	2024.10 - 2024.12	论文转化成果网站（后端开发成员）&lt;ul&gt;
&lt;li&gt;项目描述：生物语言模型集成平台是一个面向生物医学研究领域的工具类网站，旨在整合实验室研发的多种大语言模型，为研究人员提供便捷的模型调用和数据分析服务，并且还提供实验室研究成果展示等功能。本人负责部分模块后端开发，同时负责工作分配以及把控进度。&lt;/li&gt;
&lt;li&gt;项目技术栈：SpringCloud + SpringBoot + Mybatis&lt;/li&gt;
&lt;li&gt;服务拆分：基于跨语言与团队成员擅长技术的需求，将平台拆分为网关、模型处理、数据管理服务三个独立模块，并结合Nacos注册中心、Feign远程调用技术&lt;/li&gt;
&lt;li&gt;登录与用户管理：利用Spring Cloud Gateway接口，解析和验证JWT令牌，并传递用户信息至下游服务，实现服务间用户信息共享。对用户密码采取BCrypt密码加密方式，有效保障用户账号安全&lt;/li&gt;
&lt;li&gt;代码重构：分析所负责项目中多个相似的查询请求，通过自动化Mapper接口与实体类的映射，同时结合动态构建查询条件，实现了通用查询框架，提高了代码的复用性，减少了至少7个Mapper接口编码工作&lt;/li&gt;
&lt;li&gt;异步执行与存储优化：将模型调用的同步执行操作，结合Mq技术，转化为异步操作，实现平均响应时间从2000ms+降低至300ms内，并基于MinIO部署专用文件存储服务器，实现文件转存，减少本地服务器压力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;异构数据源同步平台      2023.10 - 2023.12     后端开发&lt;/li&gt;
&lt;li&gt;项目描述：该系统是一个基于Flink的异构数据源流转服务，用来作为数据源之间的数据同步工具，通过抽象异构数据源驱动，同时屏蔽数据源间不同的通信协议，通过页面化配置数据同步任务的方式简化数据库同步流程，并实现定时调度。&lt;/li&gt;
&lt;li&gt;项目技术栈：Flink + Chunjun + Xxl-Job + Redis + Retrofit2&lt;/li&gt;
&lt;li&gt;数据源Driver设计：使用工厂设计模式、模板设计模式抽象化数据源的交互逻辑，同时支持灵活扩展数据源&lt;/li&gt;
&lt;li&gt;流转进度推送：基于Redis stream搭建轻量级消息队列，同时结合SSE实例实现任务流转进度即时刷新&lt;/li&gt;
&lt;li&gt;任务调度：借助Xxl-Job实现任务调度管理，确保异构数据源的定时同步和实时更新需求，支持批量任务管理&lt;/li&gt;
&lt;li&gt;数据同步：使用钩子方法覆盖流转任务完整生命周期，并定义模板方法以高度可扩展的方式串联任务生命周期&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;专业技能&#34;&gt;&lt;a href=&#34;#专业技能&#34; class=&#34;headerlink&#34; title=&#34;专业技能&#34;&gt;&lt;/a&gt;专业技能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;熟悉Java基础编程，具有良好的面向对象编程思想、熟悉多线程、集合等知识&lt;/li&gt;
&lt;li&gt;熟悉SpringBoot、SpringCloud、Mybatis等开发框架，了解微服务架构以及Nacos、Gateway等组件的使用&lt;/li&gt;
&lt;li&gt;熟悉Mysql数据库的使用，对索引、锁机制、事务、日志、数据库范式有一定理解&lt;/li&gt;
&lt;li&gt;熟悉Redis的使用，熟悉五种常见数据类型，对缓存持久化、缓存穿透、缓存击穿有一定理解&lt;/li&gt;
&lt;li&gt;熟悉Linux系统以及常用命令的使用，对Docker、Kubernetes有一定的理解&lt;/li&gt;
&lt;li&gt;熟悉计算机网络原理，对OSI七层模型、TCP&amp;#x2F;UDP、HTTP&amp;#x2F;HTTPS协议有一定理解&lt;/li&gt;
&lt;li&gt;熟悉操作系统基础知识，对进程调度、内存管理、虚拟内存等有一定理解&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="resume" />
        <updated>2025-05-11T07:54:37.000Z</updated>
    </entry>
</feed>

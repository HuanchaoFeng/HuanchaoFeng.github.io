<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Phoenix</title>
        <link>http://example.com</link>
        <description>Every day is a chance to learn something new</description>
        <language>en</language>
        <pubDate>Tue, 13 May 2025 15:07:29 +0800</pubDate>
        <lastBuildDate>Tue, 13 May 2025 15:07:29 +0800</lastBuildDate>
        <category>LLM</category>
        <category>concept</category>
        <category>datalinkx</category>
        <category>transformer</category>
        <category>resume</category>
        <item>
            <guid isPermalink="true">http://example.com/2025/05/13/Transformer/</guid>
            <title>Transformer</title>
            <link>http://example.com/2025/05/13/Transformer/</link>
            <category>LLM</category>
            <category>transformer</category>
            <pubDate>Tue, 13 May 2025 15:07:29 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;Transformer四层结构&#34;&gt;&lt;a href=&#34;#Transformer四层结构&#34; class=&#34;headerlink&#34; title=&#34;Transformer四层结构&#34;&gt;&lt;/a&gt;Transformer四层结构&lt;/h2&gt;&lt;p&gt;Transformer结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image1.png&#34; alt=&#34;image1&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;嵌入表示层&lt;/p&gt;
&lt;p&gt;Transformer的自注意力机制是并行处理所有书如此，无法区分语序，所以需要进行位置编码，做法：先为每个单词生成向量嵌入表示，对每个单词所在位置对应一个位置向量，将两个向量进行相加。位置向量的生成公式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image2.png&#34; alt=&#34;image1&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据位置的就选择正弦余弦函数进行计算，这个计算是对每个单词里面的向量的每一维都进行计算，代码如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#transformer位置编码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;PositionalEncoder&lt;/span&gt;(nn.Module):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, d_model,max_seq_len = &lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;().__init__()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.d_model = d_model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;# 根据pos和i创建一个常量PE矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pe = torch.zeros(max_seq_len, d_model)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; pos &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(max_seq_len):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, d_model, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                pe[pos, i] = math.sin(pos / (&lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt; ** (i/d_model)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                pe[pos, i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = math.cos(pos / (&lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt; ** (i/d_model)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pe = pe.unsqueeze(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;#形状 (1, seq_len, d_model)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.register_buffer(&lt;span class=&#34;string&#34;&gt;&amp;#x27;pe&amp;#x27;&lt;/span&gt;, pe)   &lt;span class=&#34;comment&#34;&gt;#将 pe 保存为模型的一部分（不参与梯度更新，但会随模型保存/加载）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self,x&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;#x:(batch_size, seq_len, d_model)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        seq_len = x.size(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x = x + &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.pe[:,:seq_len].cuda()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用正余弦的原因是，函数的范围是[-1，1]与词向量相加不会太偏离原始语义，同时第pos+k个位置的编码是第pos个位置编码的线性组合（根据三角函数和角公式决定），这就蕴含了单词之间的距离信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/image3.png&#34; alt=&#34;image2&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自注意力层&lt;/p&gt;
&lt;p&gt;自注意力机制，即自己作为QKV进行计算，但是解码器有两个注意力模块，一个是掩码多头，一个是交叉多头注意力，但是原理其实和下面代码差不多，直接用代码展示比较能说明：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#transformer多头自注意力机制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MultiHeadAttention&lt;/span&gt;(nn.Module):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, heads, d_model,dropout = &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;().__init__()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.d_model = d_model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.h = heads&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.d_k = d_model // heads&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.q_linear = nn.Linear(d_model,d_model)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.k_linear = nn.Linear(d_model,d_model)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.v_linear = nn.Linear(d_model,d_model)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.dropout = nn.Dropout(dropout)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.out = nn.Linear(d_model,d_model)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;attention&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;q, k, v, d_k, mask = &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, dropout = &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt; &lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 转置k相乘 ​​除以 math.sqrt(d_k)​​ 的操作是缩放点积注意力，防止点积数值过大​&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scores = torch.matmul(q,k.transpose(-&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)) / math.sqrt(d_k)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; mask &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            mask = mask.unsqueeze(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            scores = scores.masked_fill(mask == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1e9&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;#掩盖那些为了补全长度而增加的单元，使其通过Softmax计算后为0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scores = F.sofmax(scores,dim=-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; dropout &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            scores = dropout(scores)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        output = torch.matmul(scores,v)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; output&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, q, k, v, mask = &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        batch_size = q.size(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 利用线性计算划分成h个头&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        q = &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.q_linear(q).view(batch_size,-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.h,&lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.d_k)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        k = &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.k_linear(k).view(batch_size,-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.h,&lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.d_k)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        v = &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.v_linear(v).view(batch_size,-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.h,&lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.d_k)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;#转置头和seq_len位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        k = k.transpose(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        q = q.transpose(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        v = v.transpose(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scores = &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.attention(q, k, v, &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.d_k, mask, &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.dropout)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 拼接多头输出并线性变换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        concat = scores.transpose(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;).contiguous().view(batch_size, -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.d_model)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        output = &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.out(concat) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; output&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前馈层&lt;/p&gt;
&lt;p&gt;接收注意力层的输出，通过带有ReLU的2层全连接网络，第一层会映射到高纬度，因为隐藏层维度的增大有利于提高质量（实验证明）：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#前馈层&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FeedForward&lt;/span&gt;(nn.Module):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, d_model, d_ff = &lt;span class=&#34;number&#34;&gt;2038&lt;/span&gt;, dropout = &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;().__init__()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.linear1 = nn.Linear(d_model, d_ff)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.dropout = nn.Dropout(dropout)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.linear2 = nn.Linear(d_ff,d_model)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, x&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x = &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.dropout(F.relu(&lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.linear1(x)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x = &lt;span class=&#34;variable language_&#34;&gt;self&lt;/span&gt;.linear2(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;残差连接和归一化&lt;/p&gt;
&lt;p&gt;​    由Transformer结构组成的网络结构通常都非常庞大。编码器和解码器均由很多层基本的Transformer 块组成，每一层中都包含复杂的非线性映射，这就导致模型的训练比较困难。因此，研究人员在 Transformer 块中进一步引入了残差连接与层归一化技术，以进一步提升训练的稳定性。具体来说，残差连接主要是指使用一条直连通道直接将对应子层的输入连接到输出，避免在优化过程中因网络过深而产生潜在的梯度消失问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;解码器与编码器&#34;&gt;&lt;a href=&#34;#解码器与编码器&#34; class=&#34;headerlink&#34; title=&#34;解码器与编码器&#34;&gt;&lt;/a&gt;解码器与编码器&lt;/h2&gt;&lt;p&gt;​	编码器端较容易实现。相比于编码器端，解码器端更复杂。具体来说，解码器的每个 Transformer 块的第一个自注意力子层额外增加了注意力掩码，对应图中的掩码多头注意力部分。这主要是因为在翻译的过程中，编码器端主要用于编码源语言序列的信息，而这个序列是完全已知的，因而编码器仅需要考虑如何融合上下文语义信息。解码器端则负责生成目标语言序列，这一生成过程是自回归的，即对于每一个单词的生成过程，仅有当前单词之前的目标语言序列是可以被观测的，因此这一额外增加的掩码是用来掩盖后续的文本信息的，以防模型在训练阶段直接看到后续的文本序列，进而无法得到有效的训练。此外，解码器端额外增加了一个多头交叉注意力模块，使用交叉注意力方法，同时接收来自编码器端的输出和当前 Transformer 块的前一个掩码注意力层的输出。查询是通过解码器前一层的输出进行投影的，而键和值是使用编码器的输出进行投影的。&lt;/p&gt;
&lt;p&gt;​	解码器端以自回归的方式生成目标语言文本，即在每个时间步 &lt;em&gt;t&lt;/em&gt;，根据编码器端输出的源语言文本表示，以及前t &lt;em&gt;−&lt;/em&gt; 1 个时刻生成的目标语言文本，生成当前时刻的目标语言单词（以我的理解来说，训练阶段是没有显示时间步概念的，通过&lt;strong&gt;一次性输入完整序列 + 掩码矩阵&lt;/strong&gt;，在单次前向传播中并行计算出所有位置的输出，同时利用掩码强制模型行为与自回归一致，而推理时必须显式按时间步生成，因为未来词未知（无法并行））。&lt;/p&gt;
&lt;h2 id=&#34;以推理生成中文翻译-我爱你-为例：&#34;&gt;&lt;a href=&#34;#以推理生成中文翻译-我爱你-为例：&#34; class=&#34;headerlink&#34; title=&#34;以推理生成中文翻译 &amp;quot;我爱你&amp;quot; 为例：&#34;&gt;&lt;/a&gt;以推理生成中文翻译 &lt;code&gt;&amp;quot;我爱你&amp;quot;&lt;/code&gt; 为例：&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;时间步&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;图1中对应的模块流程&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;具体操作&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;t=1&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;词元嵌入 → 位置编码 → 掩码多头注意力 → 编码器-解码器注意力 → 前馈网络 → Softmax&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;输入 &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt;，输出 &lt;code&gt;&amp;quot;我&amp;quot;&lt;/code&gt; 的概率分布。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;t=2&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;词元嵌入 (&lt;code&gt;&amp;lt;start&amp;gt; 我&lt;/code&gt;) → 位置编码 → 掩码多头注意力 → … → Softmax&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;输入 &lt;code&gt;&amp;lt;start&amp;gt; 我&lt;/code&gt;，输出 &lt;code&gt;&amp;quot;爱&amp;quot;&lt;/code&gt; 的概率分布。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;t=3&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;词元嵌入 (&lt;code&gt;&amp;lt;start&amp;gt; 我爱&lt;/code&gt;) → 位置编码 → … → Softmax&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;输入 &lt;code&gt;&amp;lt;start&amp;gt; 我爱&lt;/code&gt;，输出 &lt;code&gt;&amp;quot;你&amp;quot;&lt;/code&gt; 的概率分布。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;t=4&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;词元嵌入 (&lt;code&gt;&amp;lt;start&amp;gt; 我爱你&lt;/code&gt;) → … → Softmax&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;输入 &lt;code&gt;&amp;lt;start&amp;gt; 我爱你&lt;/code&gt;，输出 &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; 的概率分布，终止生成。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/05/13/DatalinkX/</guid>
            <title>DatalinkX</title>
            <link>http://example.com/2025/05/13/DatalinkX/</link>
            <category>datalinkx</category>
            <pubDate>Tue, 13 May 2025 00:35:28 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;DatalinkX 是一个基于 Flink 的异构数据源流转服务，用来作为数据源之间的数据同步工具，通过抽象异构数据源驱动加借助 FlinkX 开源组件屏蔽数据源间不同的通信协议，通过页面化配置数据同步任务的方式简化数据库同步流程，并通过 Xxl-Job 组件实现定时调度。&lt;/p&gt;
&lt;h2 id=&#34;模块设置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#模块设置&#34;&gt;#&lt;/a&gt; 模块设置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;业务数据管理模块：负责管理数据源和同步任务的增删改查。包含数据源管理、任务管理等。&lt;/li&gt;
&lt;li&gt;同步任务管理模块：借助 xx1-job 实现任务调度管理，确保异构数据源的定时同步和实时更新需求，同时支持批量任务管理，提高任务调度的效率。&lt;/li&gt;
&lt;li&gt;RPC 通信模块：利用 Retrofit2 实现分布式服务间的 RPC 调用，提供高效的数据请求和响应机制支持各模块间的数据传输和服务调用。&lt;/li&gt;
&lt;li&gt;数据源驱动模块：负责异构数据源的驱动配置，兼容多类型数据源的连接、读取和写入操作，为业务数据管理和同步提供支持。&lt;/li&gt;
&lt;li&gt;消息通道模块：采用 Redis Stream 实现分布式消息队列，保障各模块间的消息通信效率和数据传 5.&lt;br&gt;
 输的可靠性。&lt;/li&gt;
&lt;li&gt;实时刷新前端模块：通过 SSE 技术实现数据的实时推送，配合 Ant Design 在前端即时刷新数据提供用户友好的动态体验。&lt;/li&gt;
&lt;li&gt;公共模块：包含系统基础功能、工具方法和通用接口，实现各模块间的共享，提升系统的可维护性和复用性。&lt;/li&gt;
&lt;li&gt;FlinkX 模块：负责人规模数据的实时同步、数据清洗和格式转换，支持流式和批量数据的整合处理，为系统提供数据支持。&lt;br&gt;
数据清洗与转换模块：基于 Flinkx 的清洗能力，对不同数据源的数据进行标准化、过滤和转换以确保进入系统的数据一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重要模块&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#重要模块&#34;&gt;#&lt;/a&gt; 重要模块&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;消息队列sse实现实时推送&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息队列sse实现实时推送&#34;&gt;#&lt;/a&gt; 消息队列 + SSE 实现实时推送&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;首先基于自定义注解 @messageHub 标注消费者方法，在程序运行初始化完 Bean 之后，实现对每个 Bean 进行循环检查，寻找带该注解的方法，找到后将其注册成消费者。&lt;/li&gt;
&lt;li&gt;基于 Redis 的 stream 数据结构实现轻量级的消息队列，出于两点原因选择该方式，首先是本项目只需要使用消息队列实现任务状态和任务进度的推送，不需要严格意义上的高可用、低延迟，其次是 RabbitMQ 或者是 Kafka 服务的复杂性，一个健壮的项目并不是引入越多的中间件会越好，而是 Bug 越少越好，或者说出 Bug 概率越低越好。而 Redis 的 stream 借助了很多 Kafka 的设计思路，而且更轻量级。&lt;/li&gt;
&lt;li&gt;消费者的注册，其实是非常简单的一件事，只需要带有 @messageHub 的，就创建一个线程监听注解中配置的消息地址，监听到消息后回调给该消费者，并返回 ACK 标记消息已被消费，如果在消费过程中出现故障，则会继续在 pending 队列中消费，一般会重试 4 次，如果消费不了，只能是放弃，因为这并不是一个十分重要的操作，丢失部分进度消息是用户能够接收的。&lt;/li&gt;
&lt;li&gt;基于 SSE 实例实现消息实时推送，SSE 是使用流信息向浏览器进行信息推送，也就是信息不是一次性的，而是连续不断的，类似于视频的播放。SSE 是一个单向通信，只能服务器向浏览器发送，这里不选择 websocket 的原因和 2 一样，基于业务层面去考虑。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;抽象数据源driver设计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#抽象数据源driver设计&#34;&gt;#&lt;/a&gt; 抽象数据源 Driver 设计&lt;/h3&gt;
&lt;p&gt;​       该项目是支持异构数据源同步的，所以会有很多种数据源，进行每种数据源连接是确实可以使用 if else 去定义，但是这并不好维护，而且可拓展性十分差，想象一下每次新增一个数据源就写多一个 if else，代码的可读性也会很差，所以这里会基于模板模式和工厂模式对数据源驱动的获取进行抽象。&lt;/p&gt;
&lt;p&gt;​	我们把数据源实例抽象为几个步骤，读写分离，然后分别定义为接口，将支持 JDBC 的数据源做一种实现，不支持 JDBC 的数据源也做一种实现。每种实现又有一个基础类去实现基础功能。&lt;/p&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image1.png&#34; alt=&#34;image1&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;DsDriverFactory 遵循工厂设计原则，每个数据源必要信息通过压缩算法返回一个唯一字符串 connectld，DsDriverFactory 向外暴露 getDsReader、getDsWriter 方法，通过解析 connectld 得到数据源 type，根据数据源 type 获取对应 Driver.class 并通过反射生成对应的驱动对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要新增数据源，比如新增一个 Mysql 的数据源，那么只需要继承 JDBC 这个类，JDBC 这个类已经实现了部分基本的功能，并制定了相应的执行流程，Mysql 继承之后，只需要把获取数据源 JdbcUrl 这种每个数据源都不同的抽象方法给实现了就行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总体流程就是，用户提交了注册新数据源的信息之后，注册信息会存入数据库中，等到创建流转任务时，会获取数据源下的数据表，这时就调用 DsDriverFactory 获取数据源实例，并调用实例中的方法获取对应的数据 / 写入数据。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;PACKAGE_PREFIX&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;com.datalinkx.driver.dsdriver.&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; String &lt;span class=&#34;title function_&#34;&gt;getDriverClass&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String driverName)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; PACKAGE_PREFIX + driverName.toLowerCase() + &lt;span class=&#34;string&#34;&gt;&amp;quot;driver&amp;quot;&lt;/span&gt; + &lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; + ConnectIdUtils.toPascalCase(driverName) + &lt;span class=&#34;string&#34;&gt;&amp;quot;Driver&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//getDriver 方法依赖于 ConnectIdUtils 和 getDriverClass 方法来确定应该加载和实例化哪个驱动类。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; IDsDriver &lt;span class=&#34;title function_&#34;&gt;getDriver&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String connectId)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;dsType&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; ConnectIdUtils.getDsType(connectId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//拼接地址，也就是包的地址，来获取对应的类名，并返回给DsServiceImpl类，让他知道用的是哪个实现类，这就是用来替代无数个if else的关键地方&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;driverClassName&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; getDriverClass(dsType);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Class&amp;lt;?&amp;gt; driverClass = Class.forName(driverClassName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Constructor&amp;lt;?&amp;gt; constructor = driverClass.getDeclaredConstructor(String.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (IDsDriver) constructor.newInstance(connectId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; IStreamDriver &lt;span class=&#34;title function_&#34;&gt;getStreamDriver&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String connectId)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;dsType&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; ConnectIdUtils.getDsType(connectId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;driverClassName&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; getDriverClass(dsType);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Class&amp;lt;?&amp;gt; driverClass = Class.forName(driverClassName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Constructor&amp;lt;?&amp;gt; constructor = driverClass.getDeclaredConstructor(String.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (IStreamDriver) constructor.newInstance(connectId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; IDsReader &lt;span class=&#34;title function_&#34;&gt;getDsReader&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String connectId)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;         * getDriver(connectId) 返回的是一个 IDsDriver 类型的对象，然后将其强制转换为 IDsReader 类型。这种转换能够成功执行的前提是：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;         * IDsReader 接口继承自 IDsDriver 接口：如果 IDsReader 接口是 IDsDriver 接口的子接口，那么所有的 IDsReader 实现也必然是 IDsDriver 的实现。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;         * 这种情况下，转换是合法的，因为 IDsReader 是 IDsDriver 的子类型。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;         * 实现类的兼容性：调用 getDriver(connectId) 方法返回的具体实现类必须同时实现了 IDsDriver 和 IDsReader 接口。这是类型转换能够成功的关键。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;         */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (IDsReader) getDriver(connectId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (InstantiationException | IllegalAccessException | InvocationTargetException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;driver load error&amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (NoSuchMethodException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;driver load error&amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Exception&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;can not initialize driver&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; IDsWriter &lt;span class=&#34;title function_&#34;&gt;getDsWriter&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String connectId)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (IDsWriter) getDriver(connectId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (InstantiationException | IllegalAccessException | InvocationTargetException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;driver load error&amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (NoSuchMethodException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;driver load error&amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Exception&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;can not initialize driver&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;xxl-job平台&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#xxl-job平台&#34;&gt;#&lt;/a&gt; XXL-Job 平台&lt;/h3&gt;
&lt;p&gt;​	xxl-job 是一个分布式任务调度平台，核心思想是将调度任务抽象成为调度器和执行器，平台本身不承担业务逻辑，只负责发起调度请求后，由执行器接收调度请求并执行任务，这里的任务被抽象为分散的 JobHandler。JobHandler 分散到各个业务代码中，依 netty 保持与调度器的交互，通过这种方式即可实现调度与任务相互解耦，从而提高系统整体的稳定性和拓展性。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image2.png&#34; alt=&#34;image2&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;调度器只需要借助 maven 打包 xxl-job 的 admin 即可，然后 java -jar 把 jar 包运行起来即可，或者是用 docker 直接部署，而执行器则放在项目中的 Job 模块下，使用 @XxlJob (“XXX”) 在方法上定义执行器即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了解决 xxl-job 登录的问题，这里会使用一个拦截器，拦截器逻辑非常朴实无华，在发请求之前，判断 cookieValue 是否存在，如果不存在就通过 datalinkx-client 的能力发起一次登录请求。登陆后保存 cookie 加到原请求中。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Response &lt;span class=&#34;title function_&#34;&gt;intercept&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Chain chain)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;Request&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; chain.request();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		Response response;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (StringUtils.isEmpty(cookieValue)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				retrofit2.&lt;span class=&#34;type&#34;&gt;Response&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;loginResp&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; xxlLoginClient.login(username, passwd, &lt;span class=&#34;string&#34;&gt;&amp;quot;on&amp;quot;&lt;/span&gt;).execute();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				cookieValue = loginResp.headers().get(SET_COOKIE_HEADER);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (StringUtils.isNotEmpty(cookieValue)) &amp;#123;&lt;span class=&#34;comment&#34;&gt;//检查是否成功获取了 Cookie 值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;comment&#34;&gt;//如果获取了 Cookie，则创建一个新的请求，将 Cookie 添加到请求头中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;type&#34;&gt;Request&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;newRequest&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; chain.request().newBuilder()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						.addHeader(HEADER_COOKIE, cookieValue)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						.build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;comment&#34;&gt;//使用新的请求继续执行链式调用，获取响应&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;comment&#34;&gt;//当前拦截器已经完成了对请求的处理，将请求传递给拦截器链中的下一个拦截器继续处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;comment&#34;&gt;// 最后一个拦截器处理请求后，不再调用 proceed，而是直接将请求发送到服务器。服务器的响应返回，按相反顺序通过拦截器链。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				response = chain.proceed(newRequest);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;xxl-job login error&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				response = chain.proceed(chain.request());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; e;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (response.code() == &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;type&#34;&gt;ResponseBody&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;responseBody&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; response.body();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;type&#34;&gt;MediaType&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;contentType&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; responseBody != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; ? responseBody.contentType() : &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (contentType != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; contentType.subtype().equals(&lt;span class=&#34;string&#34;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;bodyString&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; getBody(response);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				bodyString = bodyString.replaceFirst(&lt;span class=&#34;string&#34;&gt;&amp;quot;\&amp;quot;result\&amp;quot;:\\s*\&amp;quot;\\s*\&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;\&amp;quot;result\&amp;quot;: null&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;type&#34;&gt;ResponseBody&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; ResponseBody.create(contentType, bodyString);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				response = response.newBuilder().body(body).build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; response;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流转任务的生命钩子函数设计&lt;/p&gt;
&lt;p&gt;​	通常的模板方法模式中会设计一个 abstract 的抽象方法，交给它的子类实现，这个方法称为模板方法。而钩子方法，是对于抽象方法或者接口中定义的方法的一个空实现，也是模板方法模式的一种实现方式。设计钩子方法的主要目的是干预执行流程，使得控制行为流程更加灵活，更符合实际业务的需求。在该项目流转任务的生命周期都是基于钩子方法 + 模板实现的，任务由 xxl-job 调度中心通过 netty 回调到 DataTransHandler 执行器中，执行器中注入任务触发类 DataTransferAction，由 doAction 开始一次任务的执行，而 FlinkAction 是继承的 AbstractDataTransferAction 实现各种模板和钩子方法:&lt;/p&gt;
&lt;p&gt;​	六个钩子方法：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(D info)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(D info, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; status, String errmsg)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;beforeExec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(U unit)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(U unit)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;checkResult&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(U unit)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;afterExec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(U unit, &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; success, String errorMsg)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; U &lt;span class=&#34;title function_&#34;&gt;convertExecUnit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(D info)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​	doAction 串联生命周期：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doAction&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T actionInfo)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 获取job详情&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;detail&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; getJobDetail(actionInfo);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;StringBuffer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;StringBuffer&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 准备执行job&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        begin(detail);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 遍历执行启动flink任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 每个单元执行前的准备&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (isStop()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;logkill trigger&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;InterruptedException&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            beforeExec(unit)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 启动任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            execute(unit);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;user stop&amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; e;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Throwable e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;execute flink task error.&amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            unitCount.decrementAndGet();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            afterExec(unit, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;, e.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            error.append(e.getMessage()).append(&lt;span class=&#34;string&#34;&gt;&amp;quot;\r\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 整个Job结束后的处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        end(detail, error.length() == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ? JOB_STATUS_SUCCESS : JOB_STATUS_ERROR, error.length() == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ? &lt;span class=&#34;string&#34;&gt;&amp;quot;success&amp;quot;&lt;/span&gt; : error.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;Stop task by user.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        JobUtils.cntx().setCanceled(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        end(detail, JOB_STATUS_STOP, &lt;span class=&#34;string&#34;&gt;&amp;quot;cancel the job&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; e;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Throwable e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;sync failed&amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        end(detail, JOB_STATUS_ERROR, e.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​	这个方法可谓是整个 datalinkx 的灵魂，核心中的核心，最核心的代码，我们通过这个方法将一个流转任务的生命周期串联起来。&lt;br&gt;
这样真正的实现类 DataTransferAction.java 只需要继承 AbstractDataTransferAction 实现各个具体的生命周期方法即可，Xx1-Job 回调来的方法直接调用 FlinkAction 继承的 doAction 方法即可将任务串联执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/05/12/LLM-concept/</guid>
            <title>LLM-concept</title>
            <link>http://example.com/2025/05/12/LLM-concept/</link>
            <category>LLM</category>
            <category>concept</category>
            <pubDate>Mon, 12 May 2025 15:54:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;大模型基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#大模型基本概念&#34;&gt;#&lt;/a&gt; 大模型基本概念&lt;/h1&gt;
&lt;h2 id=&#34;目标&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#目标&#34;&gt;#&lt;/a&gt; 目标&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;语言模型就是对自然语言的概率分布进行建模，即 P (w1 w2 w3 … wn)，计算这些词构成的这句话成为合法的一句话的概率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算下一个词的概率 P (wn | w1 w2 w3… wn-1)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;发展历程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#发展历程&#34;&gt;#&lt;/a&gt; 发展历程&lt;/h2&gt;
&lt;p&gt;从 n-gram:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;到 neural language model: 每个词都映射成一个低维向量&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image3.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;再到后面的 transformer 出现，transformer 的出现，NLP 进入了预训练微调阶段，也就是只需把预训练好的模型用特定任务的训练集去微调（fine-tune），即可对下游任务进行操作，这种模型是 PLM。&lt;/p&gt;
&lt;p&gt;随着 OpenAI 发布的 1750 亿个参数（GPT-3），开启 LLM 时代&lt;/p&gt;
&lt;h2 id=&#34;问题发现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#问题发现&#34;&gt;#&lt;/a&gt; 问题发现&lt;/h2&gt;
&lt;p&gt;・大模型（如 GPT-3）参数量极大（1750 亿 +），传统 “预训练 + 微调” 范式成本过高（需为每个任务调整海量参数）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;解决方案：&lt;br&gt;
・开发新范式（ICL/Prompt），通过输入指令或示例直接引导模型，避免微调。&lt;/p&gt;
&lt;p&gt;・但要让模型支持这种范式，必须在预训练阶段就赋予它相关能力（如理解指令、模仿示例）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模型构建的关键：&lt;br&gt;
・预训练阶段：用海量多样化数据（图书、网页、指令数据等）训练模型，使其隐式掌握 ICL/Prompt 所需的能力（如任务模式识别、指令遵循）。&lt;/p&gt;
&lt;p&gt;・后续阶段（SFT+RLHF）：进一步优化模型对新范式的响应质量（如更精准的指令理解、更安全的输出）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结论：&lt;br&gt;
・新范式（ICL/Prompt）依赖特定训练的模型：只有通过大规模预训练（及后续优化）的模型，才能直接通过上下文或指令适配任务，而传统小模型无法做到这一点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;llm的构建流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#llm的构建流程&#34;&gt;#&lt;/a&gt; LLM 的构建流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;预训练： 利用海量训练数据构建多样化内容，构建基础模型 ——&amp;gt; 对长文本建模，使模型具有语言生成能力&lt;/li&gt;
&lt;li&gt;有监督微调 SFT：用少量高质量数据集，通过有监督训练使模型具有问答、写作的能力，数据包括：用户输入提示词和对应理想输出结果&lt;/li&gt;
&lt;li&gt;奖励建模 RM：训练一个能够判断文本质量的裁判，对同个提示词，比较 SFT 生成的多个输出的质量&lt;/li&gt;
&lt;li&gt;强化学习 RLHF (human feedback)：基于 RM，优化 SFT 模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SFT 相当于学生学会答题，RM 是评分老师，判断 answer 好坏，RLHF 是学生根据老师评分改进答题策略&lt;/p&gt;
&lt;h2 id=&#34;补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#补充&#34;&gt;#&lt;/a&gt; 补充&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;N-gram 模型详解&lt;/strong&gt;&lt;br&gt;
 N-gram 是一种基于统计的语言模型，用于预测或生成文本中的下一个词，其核心思想是：一个词的出现概率依赖于它前面的有限个词（n-1 个词）。它是自然语言处理（NLP）中最基础且广泛使用的模型之一。&lt;/p&gt;
&lt;p&gt;N-gram 的定义：&lt;/p&gt;
&lt;p&gt;・指文本中连续的 &lt;em&gt;n&lt;/em&gt; 个词（或字符）组成的序列。&lt;/p&gt;
&lt;p&gt;・例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;◦ Unigram (1-gram): &amp;quot;the&amp;quot;、&amp;quot;cat&amp;quot;、&amp;quot;sat&amp;quot;（单个词）。  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;◦ Bigram (2-gram): &amp;quot;the cat&amp;quot;、&amp;quot;cat sat&amp;quot;、&amp;quot;sat on&amp;quot;（两个连续词）。  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;◦ Trigram (3-gram): &amp;quot;the cat sat&amp;quot;、&amp;quot;cat sat on&amp;quot;（三个连续词）。  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;・核心假设：&lt;/p&gt;
&lt;p&gt;・马尔可夫假设：当前词的概率仅依赖于前 &lt;em&gt;n-1&lt;/em&gt; 个词，而非整个历史。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;◦ 例如，Bigram 模型认为 `P(sat | the cat)` ≈ `P(sat | cat)`，忽略更早的上下文。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;如何计算概率？&lt;/strong&gt;&lt;br&gt;
N-gram 通过统计语料库中词序列的频率来估计概率：&lt;/p&gt;
&lt;p&gt;计算  &lt;code&gt;P(sat | the cat)&lt;/code&gt; ：&lt;/p&gt;
&lt;p&gt;P(sat∣the cat)=Count(“the cat”)Count(“the cat sat”)&lt;/p&gt;
&lt;p&gt;若语料中 “the cat” 出现 100 次，“the cat sat” 出现 30 次，则  &lt;code&gt;P(sat | the cat) = 0.3&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;N-gram 的优缺点&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;优点&lt;/th&gt;
&lt;th&gt;缺点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;简单高效，计算速度快。&lt;/td&gt;
&lt;td&gt;无法捕捉长距离依赖（如 “The cat… sat” 相隔较远时）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;小规模数据即可训练。&lt;/td&gt;
&lt;td&gt;数据稀疏性（罕见 n-gram 概率不准确）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;曾广泛用于机器翻译、拼写检查等任务。&lt;/td&gt;
&lt;td&gt;无法理解语义（仅统计共现频率）。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/05/11/resume/</guid>
            <title>resume</title>
            <link>http://example.com/2025/05/11/resume/</link>
            <category>resume</category>
            <pubDate>Sun, 11 May 2025 15:54:37 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;resume&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#resume&#34;&gt;#&lt;/a&gt; Resume&lt;/h1&gt;
&lt;h2 id=&#34;教育经历&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#教育经历&#34;&gt;#&lt;/a&gt; 教育经历&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;深圳大学（硕士） 2024-2027 计算机技术 硕士一等奖学金&lt;/li&gt;
&lt;li&gt;广东财经大学（本科） 2020-2024 计算机科学与技术 学业奖学金  CET-6 蓝桥杯省赛二等奖&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实习经历&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实习经历&#34;&gt;#&lt;/a&gt; 实习经历&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;近期：深圳迅策科技股份有限公司 	    	后端研发实习生 技术支持中心 — 政府项目组&lt;/p&gt;
&lt;p&gt;后端研发实习生 技术支持中心 — 政府项目组&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作描述：负责智慧交通平台道路信息服务的后端研发&lt;/li&gt;
&lt;li&gt;参与问题定位开发：使用 AOP 并结合自定义注解获取全局请求与处理信息，增强 API 的可追踪性和调试效率，通过此配置团队成员可以快速定位问题和分析系统行为，提高开发效率&lt;/li&gt;
&lt;li&gt;数据表设计与查询优化：独立完成交通流量、违法信息、道路信息等 5 个模块的数据设计，包含数据表设计、字段抽象与设计，同时在百万级数据的交通流量表设计上建立索引，将平均回表次数从 160w 次优化为 200 次&lt;/li&gt;
&lt;li&gt;道路模块开发：负责相关需求开发，并基于内部 CI/CD 平台搭建自动化测试流水线，保证在提交测试前各接口单元测试覆盖率达到 70% 以上，核心链路全覆盖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他：望海康信、CVTE&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;项目经历&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#项目经历&#34;&gt;#&lt;/a&gt; 项目经历&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;生物大语言模型集成平台	2024.10 - 2024.12	论文转化成果网站（后端开发成员）
&lt;ul&gt;
&lt;li&gt;项目描述：生物语言模型集成平台是一个面向生物医学研究领域的工具类网站，旨在整合实验室研发的多种大语言模型，为研究人员提供便捷的模型调用和数据分析服务，并且还提供实验室研究成果展示等功能。本人负责部分模块后端开发，同时负责工作分配以及把控进度。&lt;/li&gt;
&lt;li&gt;项目技术栈：SpringCloud + SpringBoot + Mybatis&lt;/li&gt;
&lt;li&gt;服务拆分：基于跨语言与团队成员擅长技术的需求，将平台拆分为网关、模型处理、数据管理服务三个独立模块，并结合 Nacos 注册中心、Feign 远程调用技术&lt;/li&gt;
&lt;li&gt;登录与用户管理：利用 Spring Cloud Gateway 接口，解析和验证 JWT 令牌，并传递用户信息至下游服务，实现服务间用户信息共享。对用户密码采取 BCrypt 密码加密方式，有效保障用户账号安全&lt;/li&gt;
&lt;li&gt;代码重构：分析所负责项目中多个相似的查询请求，通过自动化 Mapper 接口与实体类的映射，同时结合动态构建查询条件，实现了通用查询框架，提高了代码的复用性，减少了至少 7 个 Mapper 接口编码工作&lt;/li&gt;
&lt;li&gt;异步执行与存储优化：将模型调用的同步执行操作，结合 Mq 技术，转化为异步操作，实现平均响应时间从 2000ms + 降低至 300ms 内，并基于 MinIO 部署专用文件存储服务器，实现文件转存，减少本地服务器压力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;异构数据源同步平台      2023.10 - 2023.12     后端开发&lt;/li&gt;
&lt;li&gt;项目描述：该系统是一个基于 Flink 的异构数据源流转服务，用来作为数据源之间的数据同步工具，通过抽象异构数据源驱动，同时屏蔽数据源间不同的通信协议，通过页面化配置数据同步任务的方式简化数据库同步流程，并实现定时调度。&lt;/li&gt;
&lt;li&gt;项目技术栈：Flink + Chunjun + Xxl-Job + Redis + Retrofit2&lt;/li&gt;
&lt;li&gt;数据源 Driver 设计：使用工厂设计模式、模板设计模式抽象化数据源的交互逻辑，同时支持灵活扩展数据源&lt;/li&gt;
&lt;li&gt;流转进度推送：基于 Redis stream 搭建轻量级消息队列，同时结合 SSE 实例实现任务流转进度即时刷新&lt;/li&gt;
&lt;li&gt;任务调度：借助 Xxl-Job 实现任务调度管理，确保异构数据源的定时同步和实时更新需求，支持批量任务管理&lt;/li&gt;
&lt;li&gt;数据同步：使用钩子方法覆盖流转任务完整生命周期，并定义模板方法以高度可扩展的方式串联任务生命周期&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;专业技能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#专业技能&#34;&gt;#&lt;/a&gt; 专业技能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;熟悉 Java 基础编程，具有良好的面向对象编程思想、熟悉多线程、集合等知识&lt;/li&gt;
&lt;li&gt;熟悉 SpringBoot、SpringCloud、Mybatis 等开发框架，了解微服务架构以及 Nacos、Gateway 等组件的使用&lt;/li&gt;
&lt;li&gt;熟悉 Mysql 数据库的使用，对索引、锁机制、事务、日志、数据库范式有一定理解&lt;/li&gt;
&lt;li&gt;熟悉 Redis 的使用，熟悉五种常见数据类型，对缓存持久化、缓存穿透、缓存击穿有一定理解&lt;/li&gt;
&lt;li&gt;熟悉 Linux 系统以及常用命令的使用，对 Docker、Kubernetes 有一定的理解&lt;/li&gt;
&lt;li&gt;熟悉计算机网络原理，对 OSI 七层模型、TCP/UDP、HTTP/HTTPS 协议有一定理解&lt;/li&gt;
&lt;li&gt;熟悉操作系统基础知识，对进程调度、内存管理、虚拟内存等有一定理解&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
